//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.4952.
// 
#pragma warning disable 1591

namespace Easynet.Edge.Services.CurrencySampler.CurrenciesService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="XigniteCurrenciesSoap", Namespace="http://www.xignite.com/services/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Common))]
    public partial class XigniteCurrencies : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private Header headerValueField;
        
        private System.Threading.SendOrPostCallback ListCurrenciesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConvertRealTimeValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConvertHistoricalValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRealTimeForwardRateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRealTimeCrossRateAsStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLatestCrossRateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLatestCrossRatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRealTimeCrossRateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRealTimeCrossRateGMTOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRawCrossRateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRawCrossRatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRealTimeCrossRatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHistoricalCrossRateTablesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHistoricalCrossRateTablesBidAskOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrencyReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHistoricalCrossRateTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHistoricalCrossRateTableBidAskOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRealTimeCrossRateTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRealTimeCrossRateTableWithBidAskOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllCrossRatesForACurrencyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRealTimeCrossRateTableAsHTMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSimpleRealTimeCrossRateTableAsHTMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHistoricalCrossRateTableAsHTMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHistoricalCrossRateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHistoricalCrossRatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHistoricalCrossRateBidAskOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHistoricalCrossRatesBidAskOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHistoricalCrossRatesRangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHistoricalCrossRatesBidAskRangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHistoricalCrossRatesAsOfOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHistoricalCrossRatesBidAskAsOfOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOfficialCrossRateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOfficialCrossRatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMutipleHistoricalCrossRatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAverageHistoricalCrossRatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAverageHistoricalCrossRateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHistoricalMonthlyCrossRatesRangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCrossRateChangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrencyChartCustomOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrencyChartCustomBinaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrencyChartOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrencyChartBinaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetChartDesignOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTickOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTicksOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHistoricalHighLowOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIntradayHighLowOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public XigniteCurrencies() {
            this.Url = global::Easynet.Edge.Services.CurrencySampler.Properties.Settings.Default.Edge_Services_CurrencySampler_CurrenciesService_XigniteCurrencies;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public Header HeaderValue {
            get {
                return this.headerValueField;
            }
            set {
                this.headerValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ListCurrenciesCompletedEventHandler ListCurrenciesCompleted;
        
        /// <remarks/>
        public event ConvertRealTimeValueCompletedEventHandler ConvertRealTimeValueCompleted;
        
        /// <remarks/>
        public event ConvertHistoricalValueCompletedEventHandler ConvertHistoricalValueCompleted;
        
        /// <remarks/>
        public event GetRealTimeForwardRateCompletedEventHandler GetRealTimeForwardRateCompleted;
        
        /// <remarks/>
        public event GetRealTimeCrossRateAsStringCompletedEventHandler GetRealTimeCrossRateAsStringCompleted;
        
        /// <remarks/>
        public event GetLatestCrossRateCompletedEventHandler GetLatestCrossRateCompleted;
        
        /// <remarks/>
        public event GetLatestCrossRatesCompletedEventHandler GetLatestCrossRatesCompleted;
        
        /// <remarks/>
        public event GetRealTimeCrossRateCompletedEventHandler GetRealTimeCrossRateCompleted;
        
        /// <remarks/>
        public event GetRealTimeCrossRateGMTCompletedEventHandler GetRealTimeCrossRateGMTCompleted;
        
        /// <remarks/>
        public event GetRawCrossRateCompletedEventHandler GetRawCrossRateCompleted;
        
        /// <remarks/>
        public event GetRawCrossRatesCompletedEventHandler GetRawCrossRatesCompleted;
        
        /// <remarks/>
        public event GetRealTimeCrossRatesCompletedEventHandler GetRealTimeCrossRatesCompleted;
        
        /// <remarks/>
        public event GetHistoricalCrossRateTablesCompletedEventHandler GetHistoricalCrossRateTablesCompleted;
        
        /// <remarks/>
        public event GetHistoricalCrossRateTablesBidAskCompletedEventHandler GetHistoricalCrossRateTablesBidAskCompleted;
        
        /// <remarks/>
        public event GetCurrencyReportCompletedEventHandler GetCurrencyReportCompleted;
        
        /// <remarks/>
        public event GetHistoricalCrossRateTableCompletedEventHandler GetHistoricalCrossRateTableCompleted;
        
        /// <remarks/>
        public event GetHistoricalCrossRateTableBidAskCompletedEventHandler GetHistoricalCrossRateTableBidAskCompleted;
        
        /// <remarks/>
        public event GetRealTimeCrossRateTableCompletedEventHandler GetRealTimeCrossRateTableCompleted;
        
        /// <remarks/>
        public event GetRealTimeCrossRateTableWithBidAskCompletedEventHandler GetRealTimeCrossRateTableWithBidAskCompleted;
        
        /// <remarks/>
        public event GetAllCrossRatesForACurrencyCompletedEventHandler GetAllCrossRatesForACurrencyCompleted;
        
        /// <remarks/>
        public event GetRealTimeCrossRateTableAsHTMLCompletedEventHandler GetRealTimeCrossRateTableAsHTMLCompleted;
        
        /// <remarks/>
        public event GetSimpleRealTimeCrossRateTableAsHTMLCompletedEventHandler GetSimpleRealTimeCrossRateTableAsHTMLCompleted;
        
        /// <remarks/>
        public event GetHistoricalCrossRateTableAsHTMLCompletedEventHandler GetHistoricalCrossRateTableAsHTMLCompleted;
        
        /// <remarks/>
        public event GetHistoricalCrossRateCompletedEventHandler GetHistoricalCrossRateCompleted;
        
        /// <remarks/>
        public event GetHistoricalCrossRatesCompletedEventHandler GetHistoricalCrossRatesCompleted;
        
        /// <remarks/>
        public event GetHistoricalCrossRateBidAskCompletedEventHandler GetHistoricalCrossRateBidAskCompleted;
        
        /// <remarks/>
        public event GetHistoricalCrossRatesBidAskCompletedEventHandler GetHistoricalCrossRatesBidAskCompleted;
        
        /// <remarks/>
        public event GetHistoricalCrossRatesRangeCompletedEventHandler GetHistoricalCrossRatesRangeCompleted;
        
        /// <remarks/>
        public event GetHistoricalCrossRatesBidAskRangeCompletedEventHandler GetHistoricalCrossRatesBidAskRangeCompleted;
        
        /// <remarks/>
        public event GetHistoricalCrossRatesAsOfCompletedEventHandler GetHistoricalCrossRatesAsOfCompleted;
        
        /// <remarks/>
        public event GetHistoricalCrossRatesBidAskAsOfCompletedEventHandler GetHistoricalCrossRatesBidAskAsOfCompleted;
        
        /// <remarks/>
        public event GetOfficialCrossRateCompletedEventHandler GetOfficialCrossRateCompleted;
        
        /// <remarks/>
        public event GetOfficialCrossRatesCompletedEventHandler GetOfficialCrossRatesCompleted;
        
        /// <remarks/>
        public event GetMutipleHistoricalCrossRatesCompletedEventHandler GetMutipleHistoricalCrossRatesCompleted;
        
        /// <remarks/>
        public event GetAverageHistoricalCrossRatesCompletedEventHandler GetAverageHistoricalCrossRatesCompleted;
        
        /// <remarks/>
        public event GetAverageHistoricalCrossRateCompletedEventHandler GetAverageHistoricalCrossRateCompleted;
        
        /// <remarks/>
        public event GetHistoricalMonthlyCrossRatesRangeCompletedEventHandler GetHistoricalMonthlyCrossRatesRangeCompleted;
        
        /// <remarks/>
        public event GetCrossRateChangeCompletedEventHandler GetCrossRateChangeCompleted;
        
        /// <remarks/>
        public event GetCurrencyChartCustomCompletedEventHandler GetCurrencyChartCustomCompleted;
        
        /// <remarks/>
        public event GetCurrencyChartCustomBinaryCompletedEventHandler GetCurrencyChartCustomBinaryCompleted;
        
        /// <remarks/>
        public event GetCurrencyChartCompletedEventHandler GetCurrencyChartCompleted;
        
        /// <remarks/>
        public event GetCurrencyChartBinaryCompletedEventHandler GetCurrencyChartBinaryCompleted;
        
        /// <remarks/>
        public event GetChartDesignCompletedEventHandler GetChartDesignCompleted;
        
        /// <remarks/>
        public event GetTickCompletedEventHandler GetTickCompleted;
        
        /// <remarks/>
        public event GetTicksCompletedEventHandler GetTicksCompleted;
        
        /// <remarks/>
        public event GetHistoricalHighLowCompletedEventHandler GetHistoricalHighLowCompleted;
        
        /// <remarks/>
        public event GetIntradayHighLowCompletedEventHandler GetIntradayHighLowCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/ListCurrencies", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CurrencyList ListCurrencies() {
            object[] results = this.Invoke("ListCurrencies", new object[0]);
            return ((CurrencyList)(results[0]));
        }
        
        /// <remarks/>
        public void ListCurrenciesAsync() {
            this.ListCurrenciesAsync(null);
        }
        
        /// <remarks/>
        public void ListCurrenciesAsync(object userState) {
            if ((this.ListCurrenciesOperationCompleted == null)) {
                this.ListCurrenciesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListCurrenciesOperationCompleted);
            }
            this.InvokeAsync("ListCurrencies", new object[0], this.ListCurrenciesOperationCompleted, userState);
        }
        
        private void OnListCurrenciesOperationCompleted(object arg) {
            if ((this.ListCurrenciesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListCurrenciesCompleted(this, new ListCurrenciesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/ConvertRealTimeValue", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ExchangeConversion ConvertRealTimeValue(string From, string To, double Amount) {
            object[] results = this.Invoke("ConvertRealTimeValue", new object[] {
                        From,
                        To,
                        Amount});
            return ((ExchangeConversion)(results[0]));
        }
        
        /// <remarks/>
        public void ConvertRealTimeValueAsync(string From, string To, double Amount) {
            this.ConvertRealTimeValueAsync(From, To, Amount, null);
        }
        
        /// <remarks/>
        public void ConvertRealTimeValueAsync(string From, string To, double Amount, object userState) {
            if ((this.ConvertRealTimeValueOperationCompleted == null)) {
                this.ConvertRealTimeValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertRealTimeValueOperationCompleted);
            }
            this.InvokeAsync("ConvertRealTimeValue", new object[] {
                        From,
                        To,
                        Amount}, this.ConvertRealTimeValueOperationCompleted, userState);
        }
        
        private void OnConvertRealTimeValueOperationCompleted(object arg) {
            if ((this.ConvertRealTimeValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvertRealTimeValueCompleted(this, new ConvertRealTimeValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/ConvertHistoricalValue", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ExchangeConversion ConvertHistoricalValue(string From, string To, string AsOfDate, double Amount) {
            object[] results = this.Invoke("ConvertHistoricalValue", new object[] {
                        From,
                        To,
                        AsOfDate,
                        Amount});
            return ((ExchangeConversion)(results[0]));
        }
        
        /// <remarks/>
        public void ConvertHistoricalValueAsync(string From, string To, string AsOfDate, double Amount) {
            this.ConvertHistoricalValueAsync(From, To, AsOfDate, Amount, null);
        }
        
        /// <remarks/>
        public void ConvertHistoricalValueAsync(string From, string To, string AsOfDate, double Amount, object userState) {
            if ((this.ConvertHistoricalValueOperationCompleted == null)) {
                this.ConvertHistoricalValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertHistoricalValueOperationCompleted);
            }
            this.InvokeAsync("ConvertHistoricalValue", new object[] {
                        From,
                        To,
                        AsOfDate,
                        Amount}, this.ConvertHistoricalValueOperationCompleted, userState);
        }
        
        private void OnConvertHistoricalValueOperationCompleted(object arg) {
            if ((this.ConvertHistoricalValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvertHistoricalValueCompleted(this, new ConvertHistoricalValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetRealTimeForwardRate", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ForwardRate GetRealTimeForwardRate(string From, string To) {
            object[] results = this.Invoke("GetRealTimeForwardRate", new object[] {
                        From,
                        To});
            return ((ForwardRate)(results[0]));
        }
        
        /// <remarks/>
        public void GetRealTimeForwardRateAsync(string From, string To) {
            this.GetRealTimeForwardRateAsync(From, To, null);
        }
        
        /// <remarks/>
        public void GetRealTimeForwardRateAsync(string From, string To, object userState) {
            if ((this.GetRealTimeForwardRateOperationCompleted == null)) {
                this.GetRealTimeForwardRateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRealTimeForwardRateOperationCompleted);
            }
            this.InvokeAsync("GetRealTimeForwardRate", new object[] {
                        From,
                        To}, this.GetRealTimeForwardRateOperationCompleted, userState);
        }
        
        private void OnGetRealTimeForwardRateOperationCompleted(object arg) {
            if ((this.GetRealTimeForwardRateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRealTimeForwardRateCompleted(this, new GetRealTimeForwardRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetRealTimeCrossRateAsString", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CrossRate GetRealTimeCrossRateAsString(string From, string To) {
            object[] results = this.Invoke("GetRealTimeCrossRateAsString", new object[] {
                        From,
                        To});
            return ((CrossRate)(results[0]));
        }
        
        /// <remarks/>
        public void GetRealTimeCrossRateAsStringAsync(string From, string To) {
            this.GetRealTimeCrossRateAsStringAsync(From, To, null);
        }
        
        /// <remarks/>
        public void GetRealTimeCrossRateAsStringAsync(string From, string To, object userState) {
            if ((this.GetRealTimeCrossRateAsStringOperationCompleted == null)) {
                this.GetRealTimeCrossRateAsStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRealTimeCrossRateAsStringOperationCompleted);
            }
            this.InvokeAsync("GetRealTimeCrossRateAsString", new object[] {
                        From,
                        To}, this.GetRealTimeCrossRateAsStringOperationCompleted, userState);
        }
        
        private void OnGetRealTimeCrossRateAsStringOperationCompleted(object arg) {
            if ((this.GetRealTimeCrossRateAsStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRealTimeCrossRateAsStringCompleted(this, new GetRealTimeCrossRateAsStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetLatestCrossRate", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CrossRate GetLatestCrossRate(string From, string To) {
            object[] results = this.Invoke("GetLatestCrossRate", new object[] {
                        From,
                        To});
            return ((CrossRate)(results[0]));
        }
        
        /// <remarks/>
        public void GetLatestCrossRateAsync(string From, string To) {
            this.GetLatestCrossRateAsync(From, To, null);
        }
        
        /// <remarks/>
        public void GetLatestCrossRateAsync(string From, string To, object userState) {
            if ((this.GetLatestCrossRateOperationCompleted == null)) {
                this.GetLatestCrossRateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLatestCrossRateOperationCompleted);
            }
            this.InvokeAsync("GetLatestCrossRate", new object[] {
                        From,
                        To}, this.GetLatestCrossRateOperationCompleted, userState);
        }
        
        private void OnGetLatestCrossRateOperationCompleted(object arg) {
            if ((this.GetLatestCrossRateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLatestCrossRateCompleted(this, new GetLatestCrossRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetLatestCrossRates", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CrossRate[] GetLatestCrossRates(string From, string Tos) {
            object[] results = this.Invoke("GetLatestCrossRates", new object[] {
                        From,
                        Tos});
            return ((CrossRate[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLatestCrossRatesAsync(string From, string Tos) {
            this.GetLatestCrossRatesAsync(From, Tos, null);
        }
        
        /// <remarks/>
        public void GetLatestCrossRatesAsync(string From, string Tos, object userState) {
            if ((this.GetLatestCrossRatesOperationCompleted == null)) {
                this.GetLatestCrossRatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLatestCrossRatesOperationCompleted);
            }
            this.InvokeAsync("GetLatestCrossRates", new object[] {
                        From,
                        Tos}, this.GetLatestCrossRatesOperationCompleted, userState);
        }
        
        private void OnGetLatestCrossRatesOperationCompleted(object arg) {
            if ((this.GetLatestCrossRatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLatestCrossRatesCompleted(this, new GetLatestCrossRatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetRealTimeCrossRate", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CrossRate GetRealTimeCrossRate(Currencies From, Currencies To) {
            object[] results = this.Invoke("GetRealTimeCrossRate", new object[] {
                        From,
                        To});
            return ((CrossRate)(results[0]));
        }
        
        /// <remarks/>
        public void GetRealTimeCrossRateAsync(Currencies From, Currencies To) {
            this.GetRealTimeCrossRateAsync(From, To, null);
        }
        
        /// <remarks/>
        public void GetRealTimeCrossRateAsync(Currencies From, Currencies To, object userState) {
            if ((this.GetRealTimeCrossRateOperationCompleted == null)) {
                this.GetRealTimeCrossRateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRealTimeCrossRateOperationCompleted);
            }
            this.InvokeAsync("GetRealTimeCrossRate", new object[] {
                        From,
                        To}, this.GetRealTimeCrossRateOperationCompleted, userState);
        }
        
        private void OnGetRealTimeCrossRateOperationCompleted(object arg) {
            if ((this.GetRealTimeCrossRateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRealTimeCrossRateCompleted(this, new GetRealTimeCrossRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetRealTimeCrossRateGMT", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CrossRate GetRealTimeCrossRateGMT(Currencies From, Currencies To) {
            object[] results = this.Invoke("GetRealTimeCrossRateGMT", new object[] {
                        From,
                        To});
            return ((CrossRate)(results[0]));
        }
        
        /// <remarks/>
        public void GetRealTimeCrossRateGMTAsync(Currencies From, Currencies To) {
            this.GetRealTimeCrossRateGMTAsync(From, To, null);
        }
        
        /// <remarks/>
        public void GetRealTimeCrossRateGMTAsync(Currencies From, Currencies To, object userState) {
            if ((this.GetRealTimeCrossRateGMTOperationCompleted == null)) {
                this.GetRealTimeCrossRateGMTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRealTimeCrossRateGMTOperationCompleted);
            }
            this.InvokeAsync("GetRealTimeCrossRateGMT", new object[] {
                        From,
                        To}, this.GetRealTimeCrossRateGMTOperationCompleted, userState);
        }
        
        private void OnGetRealTimeCrossRateGMTOperationCompleted(object arg) {
            if ((this.GetRealTimeCrossRateGMTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRealTimeCrossRateGMTCompleted(this, new GetRealTimeCrossRateGMTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetRawCrossRate", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CrossRate GetRawCrossRate(Currencies From, Currencies To) {
            object[] results = this.Invoke("GetRawCrossRate", new object[] {
                        From,
                        To});
            return ((CrossRate)(results[0]));
        }
        
        /// <remarks/>
        public void GetRawCrossRateAsync(Currencies From, Currencies To) {
            this.GetRawCrossRateAsync(From, To, null);
        }
        
        /// <remarks/>
        public void GetRawCrossRateAsync(Currencies From, Currencies To, object userState) {
            if ((this.GetRawCrossRateOperationCompleted == null)) {
                this.GetRawCrossRateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRawCrossRateOperationCompleted);
            }
            this.InvokeAsync("GetRawCrossRate", new object[] {
                        From,
                        To}, this.GetRawCrossRateOperationCompleted, userState);
        }
        
        private void OnGetRawCrossRateOperationCompleted(object arg) {
            if ((this.GetRawCrossRateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRawCrossRateCompleted(this, new GetRawCrossRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetRawCrossRates", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CrossRate[] GetRawCrossRates(string Symbols) {
            object[] results = this.Invoke("GetRawCrossRates", new object[] {
                        Symbols});
            return ((CrossRate[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRawCrossRatesAsync(string Symbols) {
            this.GetRawCrossRatesAsync(Symbols, null);
        }
        
        /// <remarks/>
        public void GetRawCrossRatesAsync(string Symbols, object userState) {
            if ((this.GetRawCrossRatesOperationCompleted == null)) {
                this.GetRawCrossRatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRawCrossRatesOperationCompleted);
            }
            this.InvokeAsync("GetRawCrossRates", new object[] {
                        Symbols}, this.GetRawCrossRatesOperationCompleted, userState);
        }
        
        private void OnGetRawCrossRatesOperationCompleted(object arg) {
            if ((this.GetRawCrossRatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRawCrossRatesCompleted(this, new GetRawCrossRatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetRealTimeCrossRates", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CrossRate[] GetRealTimeCrossRates(string Symbols) {
            object[] results = this.Invoke("GetRealTimeCrossRates", new object[] {
                        Symbols});
            return ((CrossRate[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRealTimeCrossRatesAsync(string Symbols) {
            this.GetRealTimeCrossRatesAsync(Symbols, null);
        }
        
        /// <remarks/>
        public void GetRealTimeCrossRatesAsync(string Symbols, object userState) {
            if ((this.GetRealTimeCrossRatesOperationCompleted == null)) {
                this.GetRealTimeCrossRatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRealTimeCrossRatesOperationCompleted);
            }
            this.InvokeAsync("GetRealTimeCrossRates", new object[] {
                        Symbols}, this.GetRealTimeCrossRatesOperationCompleted, userState);
        }
        
        private void OnGetRealTimeCrossRatesOperationCompleted(object arg) {
            if ((this.GetRealTimeCrossRatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRealTimeCrossRatesCompleted(this, new GetRealTimeCrossRatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetHistoricalCrossRateTables", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CrossRateTable[] GetHistoricalCrossRateTables(string Symbols, string StartDate, string EndDate) {
            object[] results = this.Invoke("GetHistoricalCrossRateTables", new object[] {
                        Symbols,
                        StartDate,
                        EndDate});
            return ((CrossRateTable[])(results[0]));
        }
        
        /// <remarks/>
        public void GetHistoricalCrossRateTablesAsync(string Symbols, string StartDate, string EndDate) {
            this.GetHistoricalCrossRateTablesAsync(Symbols, StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void GetHistoricalCrossRateTablesAsync(string Symbols, string StartDate, string EndDate, object userState) {
            if ((this.GetHistoricalCrossRateTablesOperationCompleted == null)) {
                this.GetHistoricalCrossRateTablesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHistoricalCrossRateTablesOperationCompleted);
            }
            this.InvokeAsync("GetHistoricalCrossRateTables", new object[] {
                        Symbols,
                        StartDate,
                        EndDate}, this.GetHistoricalCrossRateTablesOperationCompleted, userState);
        }
        
        private void OnGetHistoricalCrossRateTablesOperationCompleted(object arg) {
            if ((this.GetHistoricalCrossRateTablesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHistoricalCrossRateTablesCompleted(this, new GetHistoricalCrossRateTablesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetHistoricalCrossRateTablesBidAsk", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CrossRateTableWithBidAsk[] GetHistoricalCrossRateTablesBidAsk(string Symbols, string StartDate, string EndDate) {
            object[] results = this.Invoke("GetHistoricalCrossRateTablesBidAsk", new object[] {
                        Symbols,
                        StartDate,
                        EndDate});
            return ((CrossRateTableWithBidAsk[])(results[0]));
        }
        
        /// <remarks/>
        public void GetHistoricalCrossRateTablesBidAskAsync(string Symbols, string StartDate, string EndDate) {
            this.GetHistoricalCrossRateTablesBidAskAsync(Symbols, StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void GetHistoricalCrossRateTablesBidAskAsync(string Symbols, string StartDate, string EndDate, object userState) {
            if ((this.GetHistoricalCrossRateTablesBidAskOperationCompleted == null)) {
                this.GetHistoricalCrossRateTablesBidAskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHistoricalCrossRateTablesBidAskOperationCompleted);
            }
            this.InvokeAsync("GetHistoricalCrossRateTablesBidAsk", new object[] {
                        Symbols,
                        StartDate,
                        EndDate}, this.GetHistoricalCrossRateTablesBidAskOperationCompleted, userState);
        }
        
        private void OnGetHistoricalCrossRateTablesBidAskOperationCompleted(object arg) {
            if ((this.GetHistoricalCrossRateTablesBidAskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHistoricalCrossRateTablesBidAskCompleted(this, new GetHistoricalCrossRateTablesBidAskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetCurrencyReport", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Report GetCurrencyReport(string From, string To, string StartDate, string EndDate) {
            object[] results = this.Invoke("GetCurrencyReport", new object[] {
                        From,
                        To,
                        StartDate,
                        EndDate});
            return ((Report)(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrencyReportAsync(string From, string To, string StartDate, string EndDate) {
            this.GetCurrencyReportAsync(From, To, StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void GetCurrencyReportAsync(string From, string To, string StartDate, string EndDate, object userState) {
            if ((this.GetCurrencyReportOperationCompleted == null)) {
                this.GetCurrencyReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrencyReportOperationCompleted);
            }
            this.InvokeAsync("GetCurrencyReport", new object[] {
                        From,
                        To,
                        StartDate,
                        EndDate}, this.GetCurrencyReportOperationCompleted, userState);
        }
        
        private void OnGetCurrencyReportOperationCompleted(object arg) {
            if ((this.GetCurrencyReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrencyReportCompleted(this, new GetCurrencyReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetHistoricalCrossRateTable", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CrossRateTable GetHistoricalCrossRateTable(string Symbols, string AsOfDate) {
            object[] results = this.Invoke("GetHistoricalCrossRateTable", new object[] {
                        Symbols,
                        AsOfDate});
            return ((CrossRateTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetHistoricalCrossRateTableAsync(string Symbols, string AsOfDate) {
            this.GetHistoricalCrossRateTableAsync(Symbols, AsOfDate, null);
        }
        
        /// <remarks/>
        public void GetHistoricalCrossRateTableAsync(string Symbols, string AsOfDate, object userState) {
            if ((this.GetHistoricalCrossRateTableOperationCompleted == null)) {
                this.GetHistoricalCrossRateTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHistoricalCrossRateTableOperationCompleted);
            }
            this.InvokeAsync("GetHistoricalCrossRateTable", new object[] {
                        Symbols,
                        AsOfDate}, this.GetHistoricalCrossRateTableOperationCompleted, userState);
        }
        
        private void OnGetHistoricalCrossRateTableOperationCompleted(object arg) {
            if ((this.GetHistoricalCrossRateTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHistoricalCrossRateTableCompleted(this, new GetHistoricalCrossRateTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetHistoricalCrossRateTableBidAsk", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CrossRateTableWithBidAsk GetHistoricalCrossRateTableBidAsk(string Symbols, string AsOfDate) {
            object[] results = this.Invoke("GetHistoricalCrossRateTableBidAsk", new object[] {
                        Symbols,
                        AsOfDate});
            return ((CrossRateTableWithBidAsk)(results[0]));
        }
        
        /// <remarks/>
        public void GetHistoricalCrossRateTableBidAskAsync(string Symbols, string AsOfDate) {
            this.GetHistoricalCrossRateTableBidAskAsync(Symbols, AsOfDate, null);
        }
        
        /// <remarks/>
        public void GetHistoricalCrossRateTableBidAskAsync(string Symbols, string AsOfDate, object userState) {
            if ((this.GetHistoricalCrossRateTableBidAskOperationCompleted == null)) {
                this.GetHistoricalCrossRateTableBidAskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHistoricalCrossRateTableBidAskOperationCompleted);
            }
            this.InvokeAsync("GetHistoricalCrossRateTableBidAsk", new object[] {
                        Symbols,
                        AsOfDate}, this.GetHistoricalCrossRateTableBidAskOperationCompleted, userState);
        }
        
        private void OnGetHistoricalCrossRateTableBidAskOperationCompleted(object arg) {
            if ((this.GetHistoricalCrossRateTableBidAskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHistoricalCrossRateTableBidAskCompleted(this, new GetHistoricalCrossRateTableBidAskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetRealTimeCrossRateTable", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CrossRateTable GetRealTimeCrossRateTable(string Symbols) {
            object[] results = this.Invoke("GetRealTimeCrossRateTable", new object[] {
                        Symbols});
            return ((CrossRateTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetRealTimeCrossRateTableAsync(string Symbols) {
            this.GetRealTimeCrossRateTableAsync(Symbols, null);
        }
        
        /// <remarks/>
        public void GetRealTimeCrossRateTableAsync(string Symbols, object userState) {
            if ((this.GetRealTimeCrossRateTableOperationCompleted == null)) {
                this.GetRealTimeCrossRateTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRealTimeCrossRateTableOperationCompleted);
            }
            this.InvokeAsync("GetRealTimeCrossRateTable", new object[] {
                        Symbols}, this.GetRealTimeCrossRateTableOperationCompleted, userState);
        }
        
        private void OnGetRealTimeCrossRateTableOperationCompleted(object arg) {
            if ((this.GetRealTimeCrossRateTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRealTimeCrossRateTableCompleted(this, new GetRealTimeCrossRateTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetRealTimeCrossRateTableWithBidAsk", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CrossRateTableWithBidAsk GetRealTimeCrossRateTableWithBidAsk(string Symbols) {
            object[] results = this.Invoke("GetRealTimeCrossRateTableWithBidAsk", new object[] {
                        Symbols});
            return ((CrossRateTableWithBidAsk)(results[0]));
        }
        
        /// <remarks/>
        public void GetRealTimeCrossRateTableWithBidAskAsync(string Symbols) {
            this.GetRealTimeCrossRateTableWithBidAskAsync(Symbols, null);
        }
        
        /// <remarks/>
        public void GetRealTimeCrossRateTableWithBidAskAsync(string Symbols, object userState) {
            if ((this.GetRealTimeCrossRateTableWithBidAskOperationCompleted == null)) {
                this.GetRealTimeCrossRateTableWithBidAskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRealTimeCrossRateTableWithBidAskOperationCompleted);
            }
            this.InvokeAsync("GetRealTimeCrossRateTableWithBidAsk", new object[] {
                        Symbols}, this.GetRealTimeCrossRateTableWithBidAskOperationCompleted, userState);
        }
        
        private void OnGetRealTimeCrossRateTableWithBidAskOperationCompleted(object arg) {
            if ((this.GetRealTimeCrossRateTableWithBidAskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRealTimeCrossRateTableWithBidAskCompleted(this, new GetRealTimeCrossRateTableWithBidAskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetAllCrossRatesForACurrency", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CrossRateTableLineWithBidAsk GetAllCrossRatesForACurrency(string Symbol) {
            object[] results = this.Invoke("GetAllCrossRatesForACurrency", new object[] {
                        Symbol});
            return ((CrossRateTableLineWithBidAsk)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllCrossRatesForACurrencyAsync(string Symbol) {
            this.GetAllCrossRatesForACurrencyAsync(Symbol, null);
        }
        
        /// <remarks/>
        public void GetAllCrossRatesForACurrencyAsync(string Symbol, object userState) {
            if ((this.GetAllCrossRatesForACurrencyOperationCompleted == null)) {
                this.GetAllCrossRatesForACurrencyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllCrossRatesForACurrencyOperationCompleted);
            }
            this.InvokeAsync("GetAllCrossRatesForACurrency", new object[] {
                        Symbol}, this.GetAllCrossRatesForACurrencyOperationCompleted, userState);
        }
        
        private void OnGetAllCrossRatesForACurrencyOperationCompleted(object arg) {
            if ((this.GetAllCrossRatesForACurrencyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllCrossRatesForACurrencyCompleted(this, new GetAllCrossRatesForACurrencyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetRealTimeCrossRateTableAsHTML", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HTMLCrossRateTable GetRealTimeCrossRateTableAsHTML(string Symbols, string ColumnHeaderStyle, string LineHeaderStyle, string CellStyle) {
            object[] results = this.Invoke("GetRealTimeCrossRateTableAsHTML", new object[] {
                        Symbols,
                        ColumnHeaderStyle,
                        LineHeaderStyle,
                        CellStyle});
            return ((HTMLCrossRateTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetRealTimeCrossRateTableAsHTMLAsync(string Symbols, string ColumnHeaderStyle, string LineHeaderStyle, string CellStyle) {
            this.GetRealTimeCrossRateTableAsHTMLAsync(Symbols, ColumnHeaderStyle, LineHeaderStyle, CellStyle, null);
        }
        
        /// <remarks/>
        public void GetRealTimeCrossRateTableAsHTMLAsync(string Symbols, string ColumnHeaderStyle, string LineHeaderStyle, string CellStyle, object userState) {
            if ((this.GetRealTimeCrossRateTableAsHTMLOperationCompleted == null)) {
                this.GetRealTimeCrossRateTableAsHTMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRealTimeCrossRateTableAsHTMLOperationCompleted);
            }
            this.InvokeAsync("GetRealTimeCrossRateTableAsHTML", new object[] {
                        Symbols,
                        ColumnHeaderStyle,
                        LineHeaderStyle,
                        CellStyle}, this.GetRealTimeCrossRateTableAsHTMLOperationCompleted, userState);
        }
        
        private void OnGetRealTimeCrossRateTableAsHTMLOperationCompleted(object arg) {
            if ((this.GetRealTimeCrossRateTableAsHTMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRealTimeCrossRateTableAsHTMLCompleted(this, new GetRealTimeCrossRateTableAsHTMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetSimpleRealTimeCrossRateTableAsHTML", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HTMLCrossRateTable GetSimpleRealTimeCrossRateTableAsHTML(string Symbols, string ColumnHeaderStyle, string LineHeaderStyle, string CellStyle) {
            object[] results = this.Invoke("GetSimpleRealTimeCrossRateTableAsHTML", new object[] {
                        Symbols,
                        ColumnHeaderStyle,
                        LineHeaderStyle,
                        CellStyle});
            return ((HTMLCrossRateTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetSimpleRealTimeCrossRateTableAsHTMLAsync(string Symbols, string ColumnHeaderStyle, string LineHeaderStyle, string CellStyle) {
            this.GetSimpleRealTimeCrossRateTableAsHTMLAsync(Symbols, ColumnHeaderStyle, LineHeaderStyle, CellStyle, null);
        }
        
        /// <remarks/>
        public void GetSimpleRealTimeCrossRateTableAsHTMLAsync(string Symbols, string ColumnHeaderStyle, string LineHeaderStyle, string CellStyle, object userState) {
            if ((this.GetSimpleRealTimeCrossRateTableAsHTMLOperationCompleted == null)) {
                this.GetSimpleRealTimeCrossRateTableAsHTMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSimpleRealTimeCrossRateTableAsHTMLOperationCompleted);
            }
            this.InvokeAsync("GetSimpleRealTimeCrossRateTableAsHTML", new object[] {
                        Symbols,
                        ColumnHeaderStyle,
                        LineHeaderStyle,
                        CellStyle}, this.GetSimpleRealTimeCrossRateTableAsHTMLOperationCompleted, userState);
        }
        
        private void OnGetSimpleRealTimeCrossRateTableAsHTMLOperationCompleted(object arg) {
            if ((this.GetSimpleRealTimeCrossRateTableAsHTMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSimpleRealTimeCrossRateTableAsHTMLCompleted(this, new GetSimpleRealTimeCrossRateTableAsHTMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetHistoricalCrossRateTableAsHTML", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HTMLCrossRateTable GetHistoricalCrossRateTableAsHTML(string Symbols, string AsOfDate, string ColumnHeaderStyle, string LineHeaderStyle, string CellStyle) {
            object[] results = this.Invoke("GetHistoricalCrossRateTableAsHTML", new object[] {
                        Symbols,
                        AsOfDate,
                        ColumnHeaderStyle,
                        LineHeaderStyle,
                        CellStyle});
            return ((HTMLCrossRateTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetHistoricalCrossRateTableAsHTMLAsync(string Symbols, string AsOfDate, string ColumnHeaderStyle, string LineHeaderStyle, string CellStyle) {
            this.GetHistoricalCrossRateTableAsHTMLAsync(Symbols, AsOfDate, ColumnHeaderStyle, LineHeaderStyle, CellStyle, null);
        }
        
        /// <remarks/>
        public void GetHistoricalCrossRateTableAsHTMLAsync(string Symbols, string AsOfDate, string ColumnHeaderStyle, string LineHeaderStyle, string CellStyle, object userState) {
            if ((this.GetHistoricalCrossRateTableAsHTMLOperationCompleted == null)) {
                this.GetHistoricalCrossRateTableAsHTMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHistoricalCrossRateTableAsHTMLOperationCompleted);
            }
            this.InvokeAsync("GetHistoricalCrossRateTableAsHTML", new object[] {
                        Symbols,
                        AsOfDate,
                        ColumnHeaderStyle,
                        LineHeaderStyle,
                        CellStyle}, this.GetHistoricalCrossRateTableAsHTMLOperationCompleted, userState);
        }
        
        private void OnGetHistoricalCrossRateTableAsHTMLOperationCompleted(object arg) {
            if ((this.GetHistoricalCrossRateTableAsHTMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHistoricalCrossRateTableAsHTMLCompleted(this, new GetHistoricalCrossRateTableAsHTMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetHistoricalCrossRate", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HistoricalCrossRate GetHistoricalCrossRate(string Symbol, string AsOfDate) {
            object[] results = this.Invoke("GetHistoricalCrossRate", new object[] {
                        Symbol,
                        AsOfDate});
            return ((HistoricalCrossRate)(results[0]));
        }
        
        /// <remarks/>
        public void GetHistoricalCrossRateAsync(string Symbol, string AsOfDate) {
            this.GetHistoricalCrossRateAsync(Symbol, AsOfDate, null);
        }
        
        /// <remarks/>
        public void GetHistoricalCrossRateAsync(string Symbol, string AsOfDate, object userState) {
            if ((this.GetHistoricalCrossRateOperationCompleted == null)) {
                this.GetHistoricalCrossRateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHistoricalCrossRateOperationCompleted);
            }
            this.InvokeAsync("GetHistoricalCrossRate", new object[] {
                        Symbol,
                        AsOfDate}, this.GetHistoricalCrossRateOperationCompleted, userState);
        }
        
        private void OnGetHistoricalCrossRateOperationCompleted(object arg) {
            if ((this.GetHistoricalCrossRateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHistoricalCrossRateCompleted(this, new GetHistoricalCrossRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetHistoricalCrossRates", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HistoricalCrossRate[] GetHistoricalCrossRates(string Symbols, string AsOfDate) {
            object[] results = this.Invoke("GetHistoricalCrossRates", new object[] {
                        Symbols,
                        AsOfDate});
            return ((HistoricalCrossRate[])(results[0]));
        }
        
        /// <remarks/>
        public void GetHistoricalCrossRatesAsync(string Symbols, string AsOfDate) {
            this.GetHistoricalCrossRatesAsync(Symbols, AsOfDate, null);
        }
        
        /// <remarks/>
        public void GetHistoricalCrossRatesAsync(string Symbols, string AsOfDate, object userState) {
            if ((this.GetHistoricalCrossRatesOperationCompleted == null)) {
                this.GetHistoricalCrossRatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHistoricalCrossRatesOperationCompleted);
            }
            this.InvokeAsync("GetHistoricalCrossRates", new object[] {
                        Symbols,
                        AsOfDate}, this.GetHistoricalCrossRatesOperationCompleted, userState);
        }
        
        private void OnGetHistoricalCrossRatesOperationCompleted(object arg) {
            if ((this.GetHistoricalCrossRatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHistoricalCrossRatesCompleted(this, new GetHistoricalCrossRatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetHistoricalCrossRateBidAsk", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FullHistoricalCrossRate GetHistoricalCrossRateBidAsk(string Symbol, string AsOfDate) {
            object[] results = this.Invoke("GetHistoricalCrossRateBidAsk", new object[] {
                        Symbol,
                        AsOfDate});
            return ((FullHistoricalCrossRate)(results[0]));
        }
        
        /// <remarks/>
        public void GetHistoricalCrossRateBidAskAsync(string Symbol, string AsOfDate) {
            this.GetHistoricalCrossRateBidAskAsync(Symbol, AsOfDate, null);
        }
        
        /// <remarks/>
        public void GetHistoricalCrossRateBidAskAsync(string Symbol, string AsOfDate, object userState) {
            if ((this.GetHistoricalCrossRateBidAskOperationCompleted == null)) {
                this.GetHistoricalCrossRateBidAskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHistoricalCrossRateBidAskOperationCompleted);
            }
            this.InvokeAsync("GetHistoricalCrossRateBidAsk", new object[] {
                        Symbol,
                        AsOfDate}, this.GetHistoricalCrossRateBidAskOperationCompleted, userState);
        }
        
        private void OnGetHistoricalCrossRateBidAskOperationCompleted(object arg) {
            if ((this.GetHistoricalCrossRateBidAskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHistoricalCrossRateBidAskCompleted(this, new GetHistoricalCrossRateBidAskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetHistoricalCrossRatesBidAsk", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FullHistoricalCrossRate[] GetHistoricalCrossRatesBidAsk(string Symbols, string AsOfDate) {
            object[] results = this.Invoke("GetHistoricalCrossRatesBidAsk", new object[] {
                        Symbols,
                        AsOfDate});
            return ((FullHistoricalCrossRate[])(results[0]));
        }
        
        /// <remarks/>
        public void GetHistoricalCrossRatesBidAskAsync(string Symbols, string AsOfDate) {
            this.GetHistoricalCrossRatesBidAskAsync(Symbols, AsOfDate, null);
        }
        
        /// <remarks/>
        public void GetHistoricalCrossRatesBidAskAsync(string Symbols, string AsOfDate, object userState) {
            if ((this.GetHistoricalCrossRatesBidAskOperationCompleted == null)) {
                this.GetHistoricalCrossRatesBidAskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHistoricalCrossRatesBidAskOperationCompleted);
            }
            this.InvokeAsync("GetHistoricalCrossRatesBidAsk", new object[] {
                        Symbols,
                        AsOfDate}, this.GetHistoricalCrossRatesBidAskOperationCompleted, userState);
        }
        
        private void OnGetHistoricalCrossRatesBidAskOperationCompleted(object arg) {
            if ((this.GetHistoricalCrossRatesBidAskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHistoricalCrossRatesBidAskCompleted(this, new GetHistoricalCrossRatesBidAskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetHistoricalCrossRatesRange", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HistoricalCrossRates GetHistoricalCrossRatesRange(string Symbol, string StartDate, string EndDate) {
            object[] results = this.Invoke("GetHistoricalCrossRatesRange", new object[] {
                        Symbol,
                        StartDate,
                        EndDate});
            return ((HistoricalCrossRates)(results[0]));
        }
        
        /// <remarks/>
        public void GetHistoricalCrossRatesRangeAsync(string Symbol, string StartDate, string EndDate) {
            this.GetHistoricalCrossRatesRangeAsync(Symbol, StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void GetHistoricalCrossRatesRangeAsync(string Symbol, string StartDate, string EndDate, object userState) {
            if ((this.GetHistoricalCrossRatesRangeOperationCompleted == null)) {
                this.GetHistoricalCrossRatesRangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHistoricalCrossRatesRangeOperationCompleted);
            }
            this.InvokeAsync("GetHistoricalCrossRatesRange", new object[] {
                        Symbol,
                        StartDate,
                        EndDate}, this.GetHistoricalCrossRatesRangeOperationCompleted, userState);
        }
        
        private void OnGetHistoricalCrossRatesRangeOperationCompleted(object arg) {
            if ((this.GetHistoricalCrossRatesRangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHistoricalCrossRatesRangeCompleted(this, new GetHistoricalCrossRatesRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetHistoricalCrossRatesBidAskRange", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FullHistoricalCrossRates GetHistoricalCrossRatesBidAskRange(string Symbol, string StartDate, string EndDate) {
            object[] results = this.Invoke("GetHistoricalCrossRatesBidAskRange", new object[] {
                        Symbol,
                        StartDate,
                        EndDate});
            return ((FullHistoricalCrossRates)(results[0]));
        }
        
        /// <remarks/>
        public void GetHistoricalCrossRatesBidAskRangeAsync(string Symbol, string StartDate, string EndDate) {
            this.GetHistoricalCrossRatesBidAskRangeAsync(Symbol, StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void GetHistoricalCrossRatesBidAskRangeAsync(string Symbol, string StartDate, string EndDate, object userState) {
            if ((this.GetHistoricalCrossRatesBidAskRangeOperationCompleted == null)) {
                this.GetHistoricalCrossRatesBidAskRangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHistoricalCrossRatesBidAskRangeOperationCompleted);
            }
            this.InvokeAsync("GetHistoricalCrossRatesBidAskRange", new object[] {
                        Symbol,
                        StartDate,
                        EndDate}, this.GetHistoricalCrossRatesBidAskRangeOperationCompleted, userState);
        }
        
        private void OnGetHistoricalCrossRatesBidAskRangeOperationCompleted(object arg) {
            if ((this.GetHistoricalCrossRatesBidAskRangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHistoricalCrossRatesBidAskRangeCompleted(this, new GetHistoricalCrossRatesBidAskRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetHistoricalCrossRatesAsOf", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HistoricalCrossRates GetHistoricalCrossRatesAsOf(string Symbol, System.DateTime EndDate, PeriodTypes PeriodType, int Periods) {
            object[] results = this.Invoke("GetHistoricalCrossRatesAsOf", new object[] {
                        Symbol,
                        EndDate,
                        PeriodType,
                        Periods});
            return ((HistoricalCrossRates)(results[0]));
        }
        
        /// <remarks/>
        public void GetHistoricalCrossRatesAsOfAsync(string Symbol, System.DateTime EndDate, PeriodTypes PeriodType, int Periods) {
            this.GetHistoricalCrossRatesAsOfAsync(Symbol, EndDate, PeriodType, Periods, null);
        }
        
        /// <remarks/>
        public void GetHistoricalCrossRatesAsOfAsync(string Symbol, System.DateTime EndDate, PeriodTypes PeriodType, int Periods, object userState) {
            if ((this.GetHistoricalCrossRatesAsOfOperationCompleted == null)) {
                this.GetHistoricalCrossRatesAsOfOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHistoricalCrossRatesAsOfOperationCompleted);
            }
            this.InvokeAsync("GetHistoricalCrossRatesAsOf", new object[] {
                        Symbol,
                        EndDate,
                        PeriodType,
                        Periods}, this.GetHistoricalCrossRatesAsOfOperationCompleted, userState);
        }
        
        private void OnGetHistoricalCrossRatesAsOfOperationCompleted(object arg) {
            if ((this.GetHistoricalCrossRatesAsOfCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHistoricalCrossRatesAsOfCompleted(this, new GetHistoricalCrossRatesAsOfCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetHistoricalCrossRatesBidAskAsOf", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FullHistoricalCrossRates GetHistoricalCrossRatesBidAskAsOf(string Symbol, System.DateTime EndDate, PeriodTypes PeriodType, int Periods) {
            object[] results = this.Invoke("GetHistoricalCrossRatesBidAskAsOf", new object[] {
                        Symbol,
                        EndDate,
                        PeriodType,
                        Periods});
            return ((FullHistoricalCrossRates)(results[0]));
        }
        
        /// <remarks/>
        public void GetHistoricalCrossRatesBidAskAsOfAsync(string Symbol, System.DateTime EndDate, PeriodTypes PeriodType, int Periods) {
            this.GetHistoricalCrossRatesBidAskAsOfAsync(Symbol, EndDate, PeriodType, Periods, null);
        }
        
        /// <remarks/>
        public void GetHistoricalCrossRatesBidAskAsOfAsync(string Symbol, System.DateTime EndDate, PeriodTypes PeriodType, int Periods, object userState) {
            if ((this.GetHistoricalCrossRatesBidAskAsOfOperationCompleted == null)) {
                this.GetHistoricalCrossRatesBidAskAsOfOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHistoricalCrossRatesBidAskAsOfOperationCompleted);
            }
            this.InvokeAsync("GetHistoricalCrossRatesBidAskAsOf", new object[] {
                        Symbol,
                        EndDate,
                        PeriodType,
                        Periods}, this.GetHistoricalCrossRatesBidAskAsOfOperationCompleted, userState);
        }
        
        private void OnGetHistoricalCrossRatesBidAskAsOfOperationCompleted(object arg) {
            if ((this.GetHistoricalCrossRatesBidAskAsOfCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHistoricalCrossRatesBidAskAsOfCompleted(this, new GetHistoricalCrossRatesBidAskAsOfCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetOfficialCrossRate", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HistoricalCrossRate GetOfficialCrossRate(CountryTypes CountryType, Currencies Symbol, string AsOfDate) {
            object[] results = this.Invoke("GetOfficialCrossRate", new object[] {
                        CountryType,
                        Symbol,
                        AsOfDate});
            return ((HistoricalCrossRate)(results[0]));
        }
        
        /// <remarks/>
        public void GetOfficialCrossRateAsync(CountryTypes CountryType, Currencies Symbol, string AsOfDate) {
            this.GetOfficialCrossRateAsync(CountryType, Symbol, AsOfDate, null);
        }
        
        /// <remarks/>
        public void GetOfficialCrossRateAsync(CountryTypes CountryType, Currencies Symbol, string AsOfDate, object userState) {
            if ((this.GetOfficialCrossRateOperationCompleted == null)) {
                this.GetOfficialCrossRateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOfficialCrossRateOperationCompleted);
            }
            this.InvokeAsync("GetOfficialCrossRate", new object[] {
                        CountryType,
                        Symbol,
                        AsOfDate}, this.GetOfficialCrossRateOperationCompleted, userState);
        }
        
        private void OnGetOfficialCrossRateOperationCompleted(object arg) {
            if ((this.GetOfficialCrossRateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOfficialCrossRateCompleted(this, new GetOfficialCrossRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetOfficialCrossRates", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HistoricalCrossRate[] GetOfficialCrossRates(CountryTypes CountryType, string Symbols, string AsOfDate) {
            object[] results = this.Invoke("GetOfficialCrossRates", new object[] {
                        CountryType,
                        Symbols,
                        AsOfDate});
            return ((HistoricalCrossRate[])(results[0]));
        }
        
        /// <remarks/>
        public void GetOfficialCrossRatesAsync(CountryTypes CountryType, string Symbols, string AsOfDate) {
            this.GetOfficialCrossRatesAsync(CountryType, Symbols, AsOfDate, null);
        }
        
        /// <remarks/>
        public void GetOfficialCrossRatesAsync(CountryTypes CountryType, string Symbols, string AsOfDate, object userState) {
            if ((this.GetOfficialCrossRatesOperationCompleted == null)) {
                this.GetOfficialCrossRatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOfficialCrossRatesOperationCompleted);
            }
            this.InvokeAsync("GetOfficialCrossRates", new object[] {
                        CountryType,
                        Symbols,
                        AsOfDate}, this.GetOfficialCrossRatesOperationCompleted, userState);
        }
        
        private void OnGetOfficialCrossRatesOperationCompleted(object arg) {
            if ((this.GetOfficialCrossRatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOfficialCrossRatesCompleted(this, new GetOfficialCrossRatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetMutipleHistoricalCrossRates", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MultipleHistoricalCrossRates GetMutipleHistoricalCrossRates(string Symbols, string AsOfDate) {
            object[] results = this.Invoke("GetMutipleHistoricalCrossRates", new object[] {
                        Symbols,
                        AsOfDate});
            return ((MultipleHistoricalCrossRates)(results[0]));
        }
        
        /// <remarks/>
        public void GetMutipleHistoricalCrossRatesAsync(string Symbols, string AsOfDate) {
            this.GetMutipleHistoricalCrossRatesAsync(Symbols, AsOfDate, null);
        }
        
        /// <remarks/>
        public void GetMutipleHistoricalCrossRatesAsync(string Symbols, string AsOfDate, object userState) {
            if ((this.GetMutipleHistoricalCrossRatesOperationCompleted == null)) {
                this.GetMutipleHistoricalCrossRatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMutipleHistoricalCrossRatesOperationCompleted);
            }
            this.InvokeAsync("GetMutipleHistoricalCrossRates", new object[] {
                        Symbols,
                        AsOfDate}, this.GetMutipleHistoricalCrossRatesOperationCompleted, userState);
        }
        
        private void OnGetMutipleHistoricalCrossRatesOperationCompleted(object arg) {
            if ((this.GetMutipleHistoricalCrossRatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMutipleHistoricalCrossRatesCompleted(this, new GetMutipleHistoricalCrossRatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetAverageHistoricalCrossRates", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AverageHistoricalCrossRate[] GetAverageHistoricalCrossRates(string Symbols, string StartDate, string EndDate) {
            object[] results = this.Invoke("GetAverageHistoricalCrossRates", new object[] {
                        Symbols,
                        StartDate,
                        EndDate});
            return ((AverageHistoricalCrossRate[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAverageHistoricalCrossRatesAsync(string Symbols, string StartDate, string EndDate) {
            this.GetAverageHistoricalCrossRatesAsync(Symbols, StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void GetAverageHistoricalCrossRatesAsync(string Symbols, string StartDate, string EndDate, object userState) {
            if ((this.GetAverageHistoricalCrossRatesOperationCompleted == null)) {
                this.GetAverageHistoricalCrossRatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAverageHistoricalCrossRatesOperationCompleted);
            }
            this.InvokeAsync("GetAverageHistoricalCrossRates", new object[] {
                        Symbols,
                        StartDate,
                        EndDate}, this.GetAverageHistoricalCrossRatesOperationCompleted, userState);
        }
        
        private void OnGetAverageHistoricalCrossRatesOperationCompleted(object arg) {
            if ((this.GetAverageHistoricalCrossRatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAverageHistoricalCrossRatesCompleted(this, new GetAverageHistoricalCrossRatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetAverageHistoricalCrossRate", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AverageHistoricalCrossRate GetAverageHistoricalCrossRate(string Symbol, string StartDate, string EndDate) {
            object[] results = this.Invoke("GetAverageHistoricalCrossRate", new object[] {
                        Symbol,
                        StartDate,
                        EndDate});
            return ((AverageHistoricalCrossRate)(results[0]));
        }
        
        /// <remarks/>
        public void GetAverageHistoricalCrossRateAsync(string Symbol, string StartDate, string EndDate) {
            this.GetAverageHistoricalCrossRateAsync(Symbol, StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void GetAverageHistoricalCrossRateAsync(string Symbol, string StartDate, string EndDate, object userState) {
            if ((this.GetAverageHistoricalCrossRateOperationCompleted == null)) {
                this.GetAverageHistoricalCrossRateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAverageHistoricalCrossRateOperationCompleted);
            }
            this.InvokeAsync("GetAverageHistoricalCrossRate", new object[] {
                        Symbol,
                        StartDate,
                        EndDate}, this.GetAverageHistoricalCrossRateOperationCompleted, userState);
        }
        
        private void OnGetAverageHistoricalCrossRateOperationCompleted(object arg) {
            if ((this.GetAverageHistoricalCrossRateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAverageHistoricalCrossRateCompleted(this, new GetAverageHistoricalCrossRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetHistoricalMonthlyCrossRatesRange", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FullHistoricalCrossRates GetHistoricalMonthlyCrossRatesRange(string Symbol, string StartDate, string EndDate) {
            object[] results = this.Invoke("GetHistoricalMonthlyCrossRatesRange", new object[] {
                        Symbol,
                        StartDate,
                        EndDate});
            return ((FullHistoricalCrossRates)(results[0]));
        }
        
        /// <remarks/>
        public void GetHistoricalMonthlyCrossRatesRangeAsync(string Symbol, string StartDate, string EndDate) {
            this.GetHistoricalMonthlyCrossRatesRangeAsync(Symbol, StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void GetHistoricalMonthlyCrossRatesRangeAsync(string Symbol, string StartDate, string EndDate, object userState) {
            if ((this.GetHistoricalMonthlyCrossRatesRangeOperationCompleted == null)) {
                this.GetHistoricalMonthlyCrossRatesRangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHistoricalMonthlyCrossRatesRangeOperationCompleted);
            }
            this.InvokeAsync("GetHistoricalMonthlyCrossRatesRange", new object[] {
                        Symbol,
                        StartDate,
                        EndDate}, this.GetHistoricalMonthlyCrossRatesRangeOperationCompleted, userState);
        }
        
        private void OnGetHistoricalMonthlyCrossRatesRangeOperationCompleted(object arg) {
            if ((this.GetHistoricalMonthlyCrossRatesRangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHistoricalMonthlyCrossRatesRangeCompleted(this, new GetHistoricalMonthlyCrossRatesRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetCrossRateChange", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CrossRateChange GetCrossRateChange(string Symbol) {
            object[] results = this.Invoke("GetCrossRateChange", new object[] {
                        Symbol});
            return ((CrossRateChange)(results[0]));
        }
        
        /// <remarks/>
        public void GetCrossRateChangeAsync(string Symbol) {
            this.GetCrossRateChangeAsync(Symbol, null);
        }
        
        /// <remarks/>
        public void GetCrossRateChangeAsync(string Symbol, object userState) {
            if ((this.GetCrossRateChangeOperationCompleted == null)) {
                this.GetCrossRateChangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCrossRateChangeOperationCompleted);
            }
            this.InvokeAsync("GetCrossRateChange", new object[] {
                        Symbol}, this.GetCrossRateChangeOperationCompleted, userState);
        }
        
        private void OnGetCrossRateChangeOperationCompleted(object arg) {
            if ((this.GetCrossRateChangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCrossRateChangeCompleted(this, new GetCrossRateChangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetCurrencyChartCustom", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HistoricalChart GetCurrencyChartCustom(string Symbol, HistoricalPeriodTypes PeriodType, string StartDate, string EndDate, StockChartStyles Style, int Width, int Height, ChartDesign Design) {
            object[] results = this.Invoke("GetCurrencyChartCustom", new object[] {
                        Symbol,
                        PeriodType,
                        StartDate,
                        EndDate,
                        Style,
                        Width,
                        Height,
                        Design});
            return ((HistoricalChart)(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrencyChartCustomAsync(string Symbol, HistoricalPeriodTypes PeriodType, string StartDate, string EndDate, StockChartStyles Style, int Width, int Height, ChartDesign Design) {
            this.GetCurrencyChartCustomAsync(Symbol, PeriodType, StartDate, EndDate, Style, Width, Height, Design, null);
        }
        
        /// <remarks/>
        public void GetCurrencyChartCustomAsync(string Symbol, HistoricalPeriodTypes PeriodType, string StartDate, string EndDate, StockChartStyles Style, int Width, int Height, ChartDesign Design, object userState) {
            if ((this.GetCurrencyChartCustomOperationCompleted == null)) {
                this.GetCurrencyChartCustomOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrencyChartCustomOperationCompleted);
            }
            this.InvokeAsync("GetCurrencyChartCustom", new object[] {
                        Symbol,
                        PeriodType,
                        StartDate,
                        EndDate,
                        Style,
                        Width,
                        Height,
                        Design}, this.GetCurrencyChartCustomOperationCompleted, userState);
        }
        
        private void OnGetCurrencyChartCustomOperationCompleted(object arg) {
            if ((this.GetCurrencyChartCustomCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrencyChartCustomCompleted(this, new GetCurrencyChartCustomCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetCurrencyChartCustomBinary", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ChartBinary GetCurrencyChartCustomBinary(string Symbol, HistoricalPeriodTypes PeriodType, string StartDate, string EndDate, StockChartStyles Style, int Width, int Height, ChartDesign Design) {
            object[] results = this.Invoke("GetCurrencyChartCustomBinary", new object[] {
                        Symbol,
                        PeriodType,
                        StartDate,
                        EndDate,
                        Style,
                        Width,
                        Height,
                        Design});
            return ((ChartBinary)(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrencyChartCustomBinaryAsync(string Symbol, HistoricalPeriodTypes PeriodType, string StartDate, string EndDate, StockChartStyles Style, int Width, int Height, ChartDesign Design) {
            this.GetCurrencyChartCustomBinaryAsync(Symbol, PeriodType, StartDate, EndDate, Style, Width, Height, Design, null);
        }
        
        /// <remarks/>
        public void GetCurrencyChartCustomBinaryAsync(string Symbol, HistoricalPeriodTypes PeriodType, string StartDate, string EndDate, StockChartStyles Style, int Width, int Height, ChartDesign Design, object userState) {
            if ((this.GetCurrencyChartCustomBinaryOperationCompleted == null)) {
                this.GetCurrencyChartCustomBinaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrencyChartCustomBinaryOperationCompleted);
            }
            this.InvokeAsync("GetCurrencyChartCustomBinary", new object[] {
                        Symbol,
                        PeriodType,
                        StartDate,
                        EndDate,
                        Style,
                        Width,
                        Height,
                        Design}, this.GetCurrencyChartCustomBinaryOperationCompleted, userState);
        }
        
        private void OnGetCurrencyChartCustomBinaryOperationCompleted(object arg) {
            if ((this.GetCurrencyChartCustomBinaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrencyChartCustomBinaryCompleted(this, new GetCurrencyChartCustomBinaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetCurrencyChart", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HistoricalChart GetCurrencyChart(string Symbol, HistoricalPeriodTypes PeriodType, string StartDate, string EndDate, StockChartStyles Style, int Width, int Height, string Preset) {
            object[] results = this.Invoke("GetCurrencyChart", new object[] {
                        Symbol,
                        PeriodType,
                        StartDate,
                        EndDate,
                        Style,
                        Width,
                        Height,
                        Preset});
            return ((HistoricalChart)(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrencyChartAsync(string Symbol, HistoricalPeriodTypes PeriodType, string StartDate, string EndDate, StockChartStyles Style, int Width, int Height, string Preset) {
            this.GetCurrencyChartAsync(Symbol, PeriodType, StartDate, EndDate, Style, Width, Height, Preset, null);
        }
        
        /// <remarks/>
        public void GetCurrencyChartAsync(string Symbol, HistoricalPeriodTypes PeriodType, string StartDate, string EndDate, StockChartStyles Style, int Width, int Height, string Preset, object userState) {
            if ((this.GetCurrencyChartOperationCompleted == null)) {
                this.GetCurrencyChartOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrencyChartOperationCompleted);
            }
            this.InvokeAsync("GetCurrencyChart", new object[] {
                        Symbol,
                        PeriodType,
                        StartDate,
                        EndDate,
                        Style,
                        Width,
                        Height,
                        Preset}, this.GetCurrencyChartOperationCompleted, userState);
        }
        
        private void OnGetCurrencyChartOperationCompleted(object arg) {
            if ((this.GetCurrencyChartCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrencyChartCompleted(this, new GetCurrencyChartCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetCurrencyChartBinary", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ChartBinary GetCurrencyChartBinary(string Symbol, HistoricalPeriodTypes PeriodType, string StartDate, string EndDate, StockChartStyles Style, int Width, int Height, string Preset) {
            object[] results = this.Invoke("GetCurrencyChartBinary", new object[] {
                        Symbol,
                        PeriodType,
                        StartDate,
                        EndDate,
                        Style,
                        Width,
                        Height,
                        Preset});
            return ((ChartBinary)(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrencyChartBinaryAsync(string Symbol, HistoricalPeriodTypes PeriodType, string StartDate, string EndDate, StockChartStyles Style, int Width, int Height, string Preset) {
            this.GetCurrencyChartBinaryAsync(Symbol, PeriodType, StartDate, EndDate, Style, Width, Height, Preset, null);
        }
        
        /// <remarks/>
        public void GetCurrencyChartBinaryAsync(string Symbol, HistoricalPeriodTypes PeriodType, string StartDate, string EndDate, StockChartStyles Style, int Width, int Height, string Preset, object userState) {
            if ((this.GetCurrencyChartBinaryOperationCompleted == null)) {
                this.GetCurrencyChartBinaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrencyChartBinaryOperationCompleted);
            }
            this.InvokeAsync("GetCurrencyChartBinary", new object[] {
                        Symbol,
                        PeriodType,
                        StartDate,
                        EndDate,
                        Style,
                        Width,
                        Height,
                        Preset}, this.GetCurrencyChartBinaryOperationCompleted, userState);
        }
        
        private void OnGetCurrencyChartBinaryOperationCompleted(object arg) {
            if ((this.GetCurrencyChartBinaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrencyChartBinaryCompleted(this, new GetCurrencyChartBinaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetChartDesign", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ChartDesign GetChartDesign() {
            object[] results = this.Invoke("GetChartDesign", new object[0]);
            return ((ChartDesign)(results[0]));
        }
        
        /// <remarks/>
        public void GetChartDesignAsync() {
            this.GetChartDesignAsync(null);
        }
        
        /// <remarks/>
        public void GetChartDesignAsync(object userState) {
            if ((this.GetChartDesignOperationCompleted == null)) {
                this.GetChartDesignOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChartDesignOperationCompleted);
            }
            this.InvokeAsync("GetChartDesign", new object[0], this.GetChartDesignOperationCompleted, userState);
        }
        
        private void OnGetChartDesignOperationCompleted(object arg) {
            if ((this.GetChartDesignCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChartDesignCompleted(this, new GetChartDesignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetTick", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SingleTick GetTick(string Symbol, string Time) {
            object[] results = this.Invoke("GetTick", new object[] {
                        Symbol,
                        Time});
            return ((SingleTick)(results[0]));
        }
        
        /// <remarks/>
        public void GetTickAsync(string Symbol, string Time) {
            this.GetTickAsync(Symbol, Time, null);
        }
        
        /// <remarks/>
        public void GetTickAsync(string Symbol, string Time, object userState) {
            if ((this.GetTickOperationCompleted == null)) {
                this.GetTickOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTickOperationCompleted);
            }
            this.InvokeAsync("GetTick", new object[] {
                        Symbol,
                        Time}, this.GetTickOperationCompleted, userState);
        }
        
        private void OnGetTickOperationCompleted(object arg) {
            if ((this.GetTickCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTickCompleted(this, new GetTickCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetTicks", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Ticks GetTicks(string Symbol, string StartTime, string EndTime, TickPeriod TickPrecision, int TickPeriods) {
            object[] results = this.Invoke("GetTicks", new object[] {
                        Symbol,
                        StartTime,
                        EndTime,
                        TickPrecision,
                        TickPeriods});
            return ((Ticks)(results[0]));
        }
        
        /// <remarks/>
        public void GetTicksAsync(string Symbol, string StartTime, string EndTime, TickPeriod TickPrecision, int TickPeriods) {
            this.GetTicksAsync(Symbol, StartTime, EndTime, TickPrecision, TickPeriods, null);
        }
        
        /// <remarks/>
        public void GetTicksAsync(string Symbol, string StartTime, string EndTime, TickPeriod TickPrecision, int TickPeriods, object userState) {
            if ((this.GetTicksOperationCompleted == null)) {
                this.GetTicksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTicksOperationCompleted);
            }
            this.InvokeAsync("GetTicks", new object[] {
                        Symbol,
                        StartTime,
                        EndTime,
                        TickPrecision,
                        TickPeriods}, this.GetTicksOperationCompleted, userState);
        }
        
        private void OnGetTicksOperationCompleted(object arg) {
            if ((this.GetTicksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTicksCompleted(this, new GetTicksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetHistoricalHighLow", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HighLowTick GetHistoricalHighLow(string Symbol, string StartDateTime, string EndDateTime) {
            object[] results = this.Invoke("GetHistoricalHighLow", new object[] {
                        Symbol,
                        StartDateTime,
                        EndDateTime});
            return ((HighLowTick)(results[0]));
        }
        
        /// <remarks/>
        public void GetHistoricalHighLowAsync(string Symbol, string StartDateTime, string EndDateTime) {
            this.GetHistoricalHighLowAsync(Symbol, StartDateTime, EndDateTime, null);
        }
        
        /// <remarks/>
        public void GetHistoricalHighLowAsync(string Symbol, string StartDateTime, string EndDateTime, object userState) {
            if ((this.GetHistoricalHighLowOperationCompleted == null)) {
                this.GetHistoricalHighLowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHistoricalHighLowOperationCompleted);
            }
            this.InvokeAsync("GetHistoricalHighLow", new object[] {
                        Symbol,
                        StartDateTime,
                        EndDateTime}, this.GetHistoricalHighLowOperationCompleted, userState);
        }
        
        private void OnGetHistoricalHighLowOperationCompleted(object arg) {
            if ((this.GetHistoricalHighLowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHistoricalHighLowCompleted(this, new GetHistoricalHighLowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xignite.com/services/GetIntradayHighLow", RequestNamespace="http://www.xignite.com/services/", ResponseNamespace="http://www.xignite.com/services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HighLowTick GetIntradayHighLow(string Symbol, string StartDateTime, string EndDateTime) {
            object[] results = this.Invoke("GetIntradayHighLow", new object[] {
                        Symbol,
                        StartDateTime,
                        EndDateTime});
            return ((HighLowTick)(results[0]));
        }
        
        /// <remarks/>
        public void GetIntradayHighLowAsync(string Symbol, string StartDateTime, string EndDateTime) {
            this.GetIntradayHighLowAsync(Symbol, StartDateTime, EndDateTime, null);
        }
        
        /// <remarks/>
        public void GetIntradayHighLowAsync(string Symbol, string StartDateTime, string EndDateTime, object userState) {
            if ((this.GetIntradayHighLowOperationCompleted == null)) {
                this.GetIntradayHighLowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIntradayHighLowOperationCompleted);
            }
            this.InvokeAsync("GetIntradayHighLow", new object[] {
                        Symbol,
                        StartDateTime,
                        EndDateTime}, this.GetIntradayHighLowOperationCompleted, userState);
        }
        
        private void OnGetIntradayHighLowOperationCompleted(object arg) {
            if ((this.GetIntradayHighLowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIntradayHighLowCompleted(this, new GetIntradayHighLowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.xignite.com/services/", IsNullable=false)]
    public partial class Header : System.Web.Services.Protocols.SoapHeader {
        
        private string usernameField;
        
        private string passwordField;
        
        private string tracerField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public string Username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public string Tracer {
            get {
                return this.tracerField;
            }
            set {
                this.tracerField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class Tick {
        
        private string timeField;
        
        private double midField;
        
        private double highField;
        
        private double lowField;
        
        /// <remarks/>
        public string Time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
            }
        }
        
        /// <remarks/>
        public double Mid {
            get {
                return this.midField;
            }
            set {
                this.midField = value;
            }
        }
        
        /// <remarks/>
        public double High {
            get {
                return this.highField;
            }
            set {
                this.highField = value;
            }
        }
        
        /// <remarks/>
        public double Low {
            get {
                return this.lowField;
            }
            set {
                this.lowField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class FullCrossRateItem {
        
        private string dateField;
        
        private double firstField;
        
        private double lastField;
        
        private double highField;
        
        private double lowField;
        
        private double bidField;
        
        private double askField;
        
        /// <remarks/>
        public string Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        public double First {
            get {
                return this.firstField;
            }
            set {
                this.firstField = value;
            }
        }
        
        /// <remarks/>
        public double Last {
            get {
                return this.lastField;
            }
            set {
                this.lastField = value;
            }
        }
        
        /// <remarks/>
        public double High {
            get {
                return this.highField;
            }
            set {
                this.highField = value;
            }
        }
        
        /// <remarks/>
        public double Low {
            get {
                return this.lowField;
            }
            set {
                this.lowField = value;
            }
        }
        
        /// <remarks/>
        public double Bid {
            get {
                return this.bidField;
            }
            set {
                this.bidField = value;
            }
        }
        
        /// <remarks/>
        public double Ask {
            get {
                return this.askField;
            }
            set {
                this.askField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class CrossRateItem {
        
        private string dateField;
        
        private double firstField;
        
        private double lastField;
        
        private double highField;
        
        private double lowField;
        
        /// <remarks/>
        public string Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        public double First {
            get {
                return this.firstField;
            }
            set {
                this.firstField = value;
            }
        }
        
        /// <remarks/>
        public double Last {
            get {
                return this.lastField;
            }
            set {
                this.lastField = value;
            }
        }
        
        /// <remarks/>
        public double High {
            get {
                return this.highField;
            }
            set {
                this.highField = value;
            }
        }
        
        /// <remarks/>
        public double Low {
            get {
                return this.lowField;
            }
            set {
                this.lowField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class Line {
        
        private LineTypes lineTypeField;
        
        private string fromField;
        
        private string value1Field;
        
        private string value2Field;
        
        private string value3Field;
        
        private string value4Field;
        
        private string value5Field;
        
        private string value6Field;
        
        private string value7Field;
        
        private string value8Field;
        
        private string value9Field;
        
        private string value10Field;
        
        private string value11Field;
        
        private string value12Field;
        
        private string value13Field;
        
        private string value14Field;
        
        private string value15Field;
        
        private string value16Field;
        
        private string value17Field;
        
        private string value18Field;
        
        private string value19Field;
        
        private string value20Field;
        
        private string value21Field;
        
        private string value22Field;
        
        private string value23Field;
        
        private string value24Field;
        
        private string value25Field;
        
        private string value26Field;
        
        private string value27Field;
        
        private string value28Field;
        
        private string value29Field;
        
        private string value30Field;
        
        private string value31Field;
        
        /// <remarks/>
        public LineTypes LineType {
            get {
                return this.lineTypeField;
            }
            set {
                this.lineTypeField = value;
            }
        }
        
        /// <remarks/>
        public string From {
            get {
                return this.fromField;
            }
            set {
                this.fromField = value;
            }
        }
        
        /// <remarks/>
        public string Value1 {
            get {
                return this.value1Field;
            }
            set {
                this.value1Field = value;
            }
        }
        
        /// <remarks/>
        public string Value2 {
            get {
                return this.value2Field;
            }
            set {
                this.value2Field = value;
            }
        }
        
        /// <remarks/>
        public string Value3 {
            get {
                return this.value3Field;
            }
            set {
                this.value3Field = value;
            }
        }
        
        /// <remarks/>
        public string Value4 {
            get {
                return this.value4Field;
            }
            set {
                this.value4Field = value;
            }
        }
        
        /// <remarks/>
        public string Value5 {
            get {
                return this.value5Field;
            }
            set {
                this.value5Field = value;
            }
        }
        
        /// <remarks/>
        public string Value6 {
            get {
                return this.value6Field;
            }
            set {
                this.value6Field = value;
            }
        }
        
        /// <remarks/>
        public string Value7 {
            get {
                return this.value7Field;
            }
            set {
                this.value7Field = value;
            }
        }
        
        /// <remarks/>
        public string Value8 {
            get {
                return this.value8Field;
            }
            set {
                this.value8Field = value;
            }
        }
        
        /// <remarks/>
        public string Value9 {
            get {
                return this.value9Field;
            }
            set {
                this.value9Field = value;
            }
        }
        
        /// <remarks/>
        public string Value10 {
            get {
                return this.value10Field;
            }
            set {
                this.value10Field = value;
            }
        }
        
        /// <remarks/>
        public string Value11 {
            get {
                return this.value11Field;
            }
            set {
                this.value11Field = value;
            }
        }
        
        /// <remarks/>
        public string Value12 {
            get {
                return this.value12Field;
            }
            set {
                this.value12Field = value;
            }
        }
        
        /// <remarks/>
        public string Value13 {
            get {
                return this.value13Field;
            }
            set {
                this.value13Field = value;
            }
        }
        
        /// <remarks/>
        public string Value14 {
            get {
                return this.value14Field;
            }
            set {
                this.value14Field = value;
            }
        }
        
        /// <remarks/>
        public string Value15 {
            get {
                return this.value15Field;
            }
            set {
                this.value15Field = value;
            }
        }
        
        /// <remarks/>
        public string Value16 {
            get {
                return this.value16Field;
            }
            set {
                this.value16Field = value;
            }
        }
        
        /// <remarks/>
        public string Value17 {
            get {
                return this.value17Field;
            }
            set {
                this.value17Field = value;
            }
        }
        
        /// <remarks/>
        public string Value18 {
            get {
                return this.value18Field;
            }
            set {
                this.value18Field = value;
            }
        }
        
        /// <remarks/>
        public string Value19 {
            get {
                return this.value19Field;
            }
            set {
                this.value19Field = value;
            }
        }
        
        /// <remarks/>
        public string Value20 {
            get {
                return this.value20Field;
            }
            set {
                this.value20Field = value;
            }
        }
        
        /// <remarks/>
        public string Value21 {
            get {
                return this.value21Field;
            }
            set {
                this.value21Field = value;
            }
        }
        
        /// <remarks/>
        public string Value22 {
            get {
                return this.value22Field;
            }
            set {
                this.value22Field = value;
            }
        }
        
        /// <remarks/>
        public string Value23 {
            get {
                return this.value23Field;
            }
            set {
                this.value23Field = value;
            }
        }
        
        /// <remarks/>
        public string Value24 {
            get {
                return this.value24Field;
            }
            set {
                this.value24Field = value;
            }
        }
        
        /// <remarks/>
        public string Value25 {
            get {
                return this.value25Field;
            }
            set {
                this.value25Field = value;
            }
        }
        
        /// <remarks/>
        public string Value26 {
            get {
                return this.value26Field;
            }
            set {
                this.value26Field = value;
            }
        }
        
        /// <remarks/>
        public string Value27 {
            get {
                return this.value27Field;
            }
            set {
                this.value27Field = value;
            }
        }
        
        /// <remarks/>
        public string Value28 {
            get {
                return this.value28Field;
            }
            set {
                this.value28Field = value;
            }
        }
        
        /// <remarks/>
        public string Value29 {
            get {
                return this.value29Field;
            }
            set {
                this.value29Field = value;
            }
        }
        
        /// <remarks/>
        public string Value30 {
            get {
                return this.value30Field;
            }
            set {
                this.value30Field = value;
            }
        }
        
        /// <remarks/>
        public string Value31 {
            get {
                return this.value31Field;
            }
            set {
                this.value31Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public enum LineTypes {
        
        /// <remarks/>
        Header,
        
        /// <remarks/>
        Line,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class Forward {
        
        private ForwardTypes typeField;
        
        private double bidField;
        
        private double askField;
        
        /// <remarks/>
        public ForwardTypes Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public double Bid {
            get {
                return this.bidField;
            }
            set {
                this.bidField = value;
            }
        }
        
        /// <remarks/>
        public double Ask {
            get {
                return this.askField;
            }
            set {
                this.askField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public enum ForwardTypes {
        
        /// <remarks/>
        Overnight,
        
        /// <remarks/>
        TomorrowNext,
        
        /// <remarks/>
        SpotNext,
        
        /// <remarks/>
        OneWeek,
        
        /// <remarks/>
        TwoWeek,
        
        /// <remarks/>
        ThreeWeek,
        
        /// <remarks/>
        OneMonth,
        
        /// <remarks/>
        TwoMonth,
        
        /// <remarks/>
        ThreeMonth,
        
        /// <remarks/>
        FourMonth,
        
        /// <remarks/>
        FiveMonth,
        
        /// <remarks/>
        SixMonth,
        
        /// <remarks/>
        SevenMonth,
        
        /// <remarks/>
        EightMonth,
        
        /// <remarks/>
        NineMonth,
        
        /// <remarks/>
        TenMonth,
        
        /// <remarks/>
        ElevenMonth,
        
        /// <remarks/>
        OneYear,
        
        /// <remarks/>
        TwoYear,
        
        /// <remarks/>
        ThreeYear,
        
        /// <remarks/>
        FourYear,
        
        /// <remarks/>
        FiveYear,
        
        /// <remarks/>
        SixYear,
        
        /// <remarks/>
        SevenYear,
        
        /// <remarks/>
        TenYear,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class Currency {
        
        private Currencies symbolField;
        
        private string nameField;
        
        /// <remarks/>
        public Currencies Symbol {
            get {
                return this.symbolField;
            }
            set {
                this.symbolField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public enum Currencies {
        
        /// <remarks/>
        USD,
        
        /// <remarks/>
        AED,
        
        /// <remarks/>
        AFA,
        
        /// <remarks/>
        AFN,
        
        /// <remarks/>
        ALL,
        
        /// <remarks/>
        AMD,
        
        /// <remarks/>
        ANG,
        
        /// <remarks/>
        AOA,
        
        /// <remarks/>
        ARA,
        
        /// <remarks/>
        ARE,
        
        /// <remarks/>
        ARS,
        
        /// <remarks/>
        ATS,
        
        /// <remarks/>
        AUD,
        
        /// <remarks/>
        AUN,
        
        /// <remarks/>
        AWG,
        
        /// <remarks/>
        AZM,
        
        /// <remarks/>
        BAM,
        
        /// <remarks/>
        BBD,
        
        /// <remarks/>
        BDT,
        
        /// <remarks/>
        BEF,
        
        /// <remarks/>
        BEL,
        
        /// <remarks/>
        BGL,
        
        /// <remarks/>
        BGN,
        
        /// <remarks/>
        BHD,
        
        /// <remarks/>
        BIF,
        
        /// <remarks/>
        BMD,
        
        /// <remarks/>
        BND,
        
        /// <remarks/>
        BOB,
        
        /// <remarks/>
        BOV,
        
        /// <remarks/>
        BRC,
        
        /// <remarks/>
        BRE,
        
        /// <remarks/>
        BRI,
        
        /// <remarks/>
        BRL,
        
        /// <remarks/>
        BRR,
        
        /// <remarks/>
        BSD,
        
        /// <remarks/>
        BTN,
        
        /// <remarks/>
        BWP,
        
        /// <remarks/>
        BYR,
        
        /// <remarks/>
        BZD,
        
        /// <remarks/>
        CAD,
        
        /// <remarks/>
        CDF,
        
        /// <remarks/>
        CHF,
        
        /// <remarks/>
        CLF,
        
        /// <remarks/>
        CHK,
        
        /// <remarks/>
        CLP,
        
        /// <remarks/>
        CNY,
        
        /// <remarks/>
        COP,
        
        /// <remarks/>
        CRC,
        
        /// <remarks/>
        CSD,
        
        /// <remarks/>
        CUP,
        
        /// <remarks/>
        CVE,
        
        /// <remarks/>
        CYP,
        
        /// <remarks/>
        CZK,
        
        /// <remarks/>
        DEM,
        
        /// <remarks/>
        DJF,
        
        /// <remarks/>
        DKK,
        
        /// <remarks/>
        DOP,
        
        /// <remarks/>
        DOE,
        
        /// <remarks/>
        DOW,
        
        /// <remarks/>
        DZD,
        
        /// <remarks/>
        ECS,
        
        /// <remarks/>
        EEK,
        
        /// <remarks/>
        EGP,
        
        /// <remarks/>
        ERN,
        
        /// <remarks/>
        ESP,
        
        /// <remarks/>
        ETB,
        
        /// <remarks/>
        EUR,
        
        /// <remarks/>
        FIM,
        
        /// <remarks/>
        FJD,
        
        /// <remarks/>
        FKP,
        
        /// <remarks/>
        FRF,
        
        /// <remarks/>
        FRN,
        
        /// <remarks/>
        GBP,
        
        /// <remarks/>
        GEL,
        
        /// <remarks/>
        GGP,
        
        /// <remarks/>
        GHC,
        
        /// <remarks/>
        GHS,
        
        /// <remarks/>
        GIP,
        
        /// <remarks/>
        GMD,
        
        /// <remarks/>
        GNF,
        
        /// <remarks/>
        GRD,
        
        /// <remarks/>
        GTQ,
        
        /// <remarks/>
        GYD,
        
        /// <remarks/>
        HKD,
        
        /// <remarks/>
        HNL,
        
        /// <remarks/>
        HRD,
        
        /// <remarks/>
        HRK,
        
        /// <remarks/>
        HTG,
        
        /// <remarks/>
        HUF,
        
        /// <remarks/>
        IDR,
        
        /// <remarks/>
        IEP,
        
        /// <remarks/>
        ILS,
        
        /// <remarks/>
        IMP,
        
        /// <remarks/>
        INR,
        
        /// <remarks/>
        IQD,
        
        /// <remarks/>
        IRR,
        
        /// <remarks/>
        ISK,
        
        /// <remarks/>
        ITL,
        
        /// <remarks/>
        JEP,
        
        /// <remarks/>
        JMD,
        
        /// <remarks/>
        JOD,
        
        /// <remarks/>
        JPY,
        
        /// <remarks/>
        KES,
        
        /// <remarks/>
        KGS,
        
        /// <remarks/>
        KHR,
        
        /// <remarks/>
        KMF,
        
        /// <remarks/>
        KPW,
        
        /// <remarks/>
        KRU,
        
        /// <remarks/>
        KRW,
        
        /// <remarks/>
        KWD,
        
        /// <remarks/>
        KYD,
        
        /// <remarks/>
        KZT,
        
        /// <remarks/>
        LAK,
        
        /// <remarks/>
        LBP,
        
        /// <remarks/>
        LKR,
        
        /// <remarks/>
        LRD,
        
        /// <remarks/>
        LSL,
        
        /// <remarks/>
        LTL,
        
        /// <remarks/>
        LUF,
        
        /// <remarks/>
        LVL,
        
        /// <remarks/>
        LYD,
        
        /// <remarks/>
        M5P,
        
        /// <remarks/>
        MAD,
        
        /// <remarks/>
        MAL,
        
        /// <remarks/>
        MDL,
        
        /// <remarks/>
        MFG,
        
        /// <remarks/>
        MGA,
        
        /// <remarks/>
        MKD,
        
        /// <remarks/>
        MMK,
        
        /// <remarks/>
        MNT,
        
        /// <remarks/>
        MOP,
        
        /// <remarks/>
        MRO,
        
        /// <remarks/>
        MTL,
        
        /// <remarks/>
        MTP,
        
        /// <remarks/>
        MUR,
        
        /// <remarks/>
        MVR,
        
        /// <remarks/>
        MWK,
        
        /// <remarks/>
        MXN,
        
        /// <remarks/>
        MXP,
        
        /// <remarks/>
        MXV,
        
        /// <remarks/>
        MYR,
        
        /// <remarks/>
        MZM,
        
        /// <remarks/>
        MZN,
        
        /// <remarks/>
        NAD,
        
        /// <remarks/>
        NBL,
        
        /// <remarks/>
        NGN,
        
        /// <remarks/>
        NIC,
        
        /// <remarks/>
        NIO,
        
        /// <remarks/>
        NLG,
        
        /// <remarks/>
        NOK,
        
        /// <remarks/>
        NPR,
        
        /// <remarks/>
        NSO,
        
        /// <remarks/>
        NZD,
        
        /// <remarks/>
        OMR,
        
        /// <remarks/>
        OSO,
        
        /// <remarks/>
        PAB,
        
        /// <remarks/>
        PEI,
        
        /// <remarks/>
        PEN,
        
        /// <remarks/>
        PES,
        
        /// <remarks/>
        PGK,
        
        /// <remarks/>
        PHP,
        
        /// <remarks/>
        PKR,
        
        /// <remarks/>
        PLN,
        
        /// <remarks/>
        PLZ,
        
        /// <remarks/>
        PTE,
        
        /// <remarks/>
        PYG,
        
        /// <remarks/>
        QAR,
        
        /// <remarks/>
        ROL,
        
        /// <remarks/>
        RON,
        
        /// <remarks/>
        RSD,
        
        /// <remarks/>
        RUB,
        
        /// <remarks/>
        RUR,
        
        /// <remarks/>
        RWF,
        
        /// <remarks/>
        SAR,
        
        /// <remarks/>
        SBD,
        
        /// <remarks/>
        SCR,
        
        /// <remarks/>
        SDD,
        
        /// <remarks/>
        SDG,
        
        /// <remarks/>
        SDP,
        
        /// <remarks/>
        SDR,
        
        /// <remarks/>
        SEK,
        
        /// <remarks/>
        SGD,
        
        /// <remarks/>
        SHP,
        
        /// <remarks/>
        SIT,
        
        /// <remarks/>
        SKK,
        
        /// <remarks/>
        SLL,
        
        /// <remarks/>
        SOS,
        
        /// <remarks/>
        SPL,
        
        /// <remarks/>
        SRG,
        
        /// <remarks/>
        STD,
        
        /// <remarks/>
        SUR,
        
        /// <remarks/>
        SVC,
        
        /// <remarks/>
        SYP,
        
        /// <remarks/>
        SZL,
        
        /// <remarks/>
        THB,
        
        /// <remarks/>
        TJR,
        
        /// <remarks/>
        TJS,
        
        /// <remarks/>
        TMM,
        
        /// <remarks/>
        TND,
        
        /// <remarks/>
        TOP,
        
        /// <remarks/>
        TRL,
        
        /// <remarks/>
        TRY,
        
        /// <remarks/>
        TTD,
        
        /// <remarks/>
        TVD,
        
        /// <remarks/>
        TWD,
        
        /// <remarks/>
        TZS,
        
        /// <remarks/>
        UAH,
        
        /// <remarks/>
        UGX,
        
        /// <remarks/>
        UNK,
        
        /// <remarks/>
        UYP,
        
        /// <remarks/>
        UYU,
        
        /// <remarks/>
        UZS,
        
        /// <remarks/>
        VEB,
        
        /// <remarks/>
        VEF,
        
        /// <remarks/>
        VND,
        
        /// <remarks/>
        VRL,
        
        /// <remarks/>
        VRN,
        
        /// <remarks/>
        VUV,
        
        /// <remarks/>
        WST,
        
        /// <remarks/>
        XAF,
        
        /// <remarks/>
        XAG,
        
        /// <remarks/>
        XAU,
        
        /// <remarks/>
        XCD,
        
        /// <remarks/>
        XDR,
        
        /// <remarks/>
        XEU,
        
        /// <remarks/>
        XOF,
        
        /// <remarks/>
        XPD,
        
        /// <remarks/>
        XPF,
        
        /// <remarks/>
        XPT,
        
        /// <remarks/>
        YER,
        
        /// <remarks/>
        YUD,
        
        /// <remarks/>
        YUM,
        
        /// <remarks/>
        ZAL,
        
        /// <remarks/>
        ZAR,
        
        /// <remarks/>
        ZMK,
        
        /// <remarks/>
        ZRN,
        
        /// <remarks/>
        ZRZ,
        
        /// <remarks/>
        ZWD,
        
        /// <remarks/>
        ZWL,
        
        /// <remarks/>
        BAD,
        
        /// <remarks/>
        NOCURRENCY,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class Country {
        
        private string codeField;
        
        private string nameField;
        
        /// <remarks/>
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class CurrencyItem {
        
        private string symbolField;
        
        private string nameField;
        
        private string pluralField;
        
        private bool supportedField;
        
        private bool activeField;
        
        private string activeMessageField;
        
        private Country[] countriesField;
        
        /// <remarks/>
        public string Symbol {
            get {
                return this.symbolField;
            }
            set {
                this.symbolField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Plural {
            get {
                return this.pluralField;
            }
            set {
                this.pluralField = value;
            }
        }
        
        /// <remarks/>
        public bool Supported {
            get {
                return this.supportedField;
            }
            set {
                this.supportedField = value;
            }
        }
        
        /// <remarks/>
        public bool Active {
            get {
                return this.activeField;
            }
            set {
                this.activeField = value;
            }
        }
        
        /// <remarks/>
        public string ActiveMessage {
            get {
                return this.activeMessageField;
            }
            set {
                this.activeMessageField = value;
            }
        }
        
        /// <remarks/>
        public Country[] Countries {
            get {
                return this.countriesField;
            }
            set {
                this.countriesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HighLowTick))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Ticks))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SingleTick))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ChartBinary))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StockChart))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HistoricalChart))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ChartDesign))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Change))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CrossRateChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AverageHistoricalCrossRate))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MultipleHistoricalCrossRates))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FullHistoricalCrossRates))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HistoricalCrossRates))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FullHistoricalCrossRate))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HistoricalCrossRate))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HTMLCrossRateTable))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Report))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CrossRateTableLineWithBidAsk))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CrossRateTableWithBidAsk))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ExchangeRate))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CrossRateTableLine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CrossRateTable))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CrossRate))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ForwardRate))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ExchangeConversion))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CurrencyList))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class Common {
        
        private OutcomeTypes outcomeField;
        
        private string messageField;
        
        private string identityField;
        
        private double delayField;
        
        /// <remarks/>
        public OutcomeTypes Outcome {
            get {
                return this.outcomeField;
            }
            set {
                this.outcomeField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public string Identity {
            get {
                return this.identityField;
            }
            set {
                this.identityField = value;
            }
        }
        
        /// <remarks/>
        public double Delay {
            get {
                return this.delayField;
            }
            set {
                this.delayField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public enum OutcomeTypes {
        
        /// <remarks/>
        Success,
        
        /// <remarks/>
        SystemError,
        
        /// <remarks/>
        RequestError,
        
        /// <remarks/>
        RegistrationError,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class HighLowTick : Common {
        
        private string symbolField;
        
        private HighLowTickTypes typeField;
        
        private SingleTick highField;
        
        private SingleTick lowField;
        
        /// <remarks/>
        public string Symbol {
            get {
                return this.symbolField;
            }
            set {
                this.symbolField = value;
            }
        }
        
        /// <remarks/>
        public HighLowTickTypes Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public SingleTick High {
            get {
                return this.highField;
            }
            set {
                this.highField = value;
            }
        }
        
        /// <remarks/>
        public SingleTick Low {
            get {
                return this.lowField;
            }
            set {
                this.lowField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public enum HighLowTickTypes {
        
        /// <remarks/>
        High,
        
        /// <remarks/>
        Low,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class SingleTick : Common {
        
        private string symbolField;
        
        private string timeField;
        
        private double bidField;
        
        private double askField;
        
        private double midField;
        
        /// <remarks/>
        public string Symbol {
            get {
                return this.symbolField;
            }
            set {
                this.symbolField = value;
            }
        }
        
        /// <remarks/>
        public string Time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
            }
        }
        
        /// <remarks/>
        public double Bid {
            get {
                return this.bidField;
            }
            set {
                this.bidField = value;
            }
        }
        
        /// <remarks/>
        public double Ask {
            get {
                return this.askField;
            }
            set {
                this.askField = value;
            }
        }
        
        /// <remarks/>
        public double Mid {
            get {
                return this.midField;
            }
            set {
                this.midField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class Ticks : Common {
        
        private string symbolField;
        
        private Tick[] ticks1Field;
        
        /// <remarks/>
        public string Symbol {
            get {
                return this.symbolField;
            }
            set {
                this.symbolField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute("Ticks")]
        public Tick[] Ticks1 {
            get {
                return this.ticks1Field;
            }
            set {
                this.ticks1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class ChartBinary : Common {
        
        private byte[] byteArrayField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] ByteArray {
            get {
                return this.byteArrayField;
            }
            set {
                this.byteArrayField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HistoricalChart))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class StockChart : Common {
        
        private ChartDesign designField;
        
        /// <remarks/>
        public ChartDesign Design {
            get {
                return this.designField;
            }
            set {
                this.designField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class ChartDesign : Common {
        
        private bool secureField;
        
        private string textTitleField;
        
        private string textHeaderField;
        
        private string textFooterField;
        
        private string textPriceLineField;
        
        private string textVolumeBarField;
        
        private string textHighestField;
        
        private string textLowestField;
        
        private string textOpenField;
        
        private string textCloseField;
        
        private string textUpField;
        
        private string textDownField;
        
        private string colorBackgroundField;
        
        private string colorBackWallField;
        
        private string colorVolumeBackWallField;
        
        private bool showVolumeBackWallField;
        
        private string colorHighlightField;
        
        private string colorPriceLineField;
        
        private string colorVolumeBarField;
        
        private string colorVolumeBarFillField;
        
        private string colorHighField;
        
        private string colorStickUpField;
        
        private string colorStickLowField;
        
        private string colorConstantField;
        
        private string colorLowField;
        
        private string colorPointField;
        
        private string colorTitleField;
        
        private string colorFooterField;
        
        private string colorHeaderField;
        
        private string colorAxisField;
        
        private string colorGridField;
        
        private string colorFontsField;
        
        private string colorStripeField;
        
        private string colorOpenField;
        
        private string colorCloseField;
        
        private string colorVerticalGridField;
        
        private string colorHorizontalGridField;
        
        private string colorUpField;
        
        private string colorDownField;
        
        private string colorHighLowLineField;
        
        private string colorCollectionField;
        
        private LinePattern gridHorizontalStyleField;
        
        private LinePattern gridVerticalStyleField;
        
        private int gridHorizontalWidthField;
        
        private int gridVerticalWidthField;
        
        private string colorFrameField;
        
        private string frameBorderField;
        
        private string formatPriceLineField;
        
        private string formatVolumeField;
        
        private string formatDateField;
        
        private bool gradeBackgroundField;
        
        private bool gradeBackwallField;
        
        private string waterMarkField;
        
        private int waterMarkTopMarginField;
        
        private int waterMarkLeftMarginField;
        
        private int waterMarkTransparencyField;
        
        private float pointSizeField;
        
        private bool stackVariationLabelsField;
        
        private bool showAxisLabelInLegendField;
        
        private int lineWidthField;
        
        private int splitPercentField;
        
        private bool showHighField;
        
        private bool showLowField;
        
        private bool showOpenField;
        
        private bool showCloseField;
        
        private bool showVolumeField;
        
        private bool showUpVariationField;
        
        private bool showDownVariationField;
        
        private bool showLegendField;
        
        private int variationYearField;
        
        private int volumeDividerField;
        
        private int volumeTextOffsetField;
        
        private int priceTextOffsetField;
        
        private ImageFrameType frameTypeField;
        
        private PredefinedProjection projectionField;
        
        private int marginTopField;
        
        private int marginBottomField;
        
        private int marginLeftField;
        
        private int marginRightField;
        
        private string fontFamilyField;
        
        private int fontSizeHeaderField;
        
        private int fontSizeFooterField;
        
        private double heightField;
        
        private double widthField;
        
        private int zoomPercentField;
        
        private bool legendBoxField;
        
        private string colorLegendBackgroundField;
        
        private string colorLegendBorderField;
        
        private int legendVerticalPositionField;
        
        private int legendHorizontalPositionField;
        
        private bool reloadField;
        
        private bool showPriceChartLabelsField;
        
        private TickPeriod tickPrecisionField;
        
        private int tickPeriodsField;
        
        private HorzAlign waterMarkHorizontalAlignField;
        
        private PredefinedLightModel lightSchemeField;
        
        private int fontSizeLegendField;
        
        private int fontSizeAxesField;
        
        private int fontSizeTitleField;
        
        private int daysForHourDisplayField;
        
        private int daysForDayDisplayField;
        
        private int daysForWeekDisplayField;
        
        private int daysForBiWeeklyDisplayField;
        
        private int daysForMonthDisplayField;
        
        private int daysForQuarterDisplayField;
        
        private int daysForSemiAnnualDisplayField;
        
        private int daysForAnnualDisplayField;
        
        private int daysForBiAnnualDisplayField;
        
        private int daysForPentaAnnualDisplayField;
        
        /// <remarks/>
        public bool Secure {
            get {
                return this.secureField;
            }
            set {
                this.secureField = value;
            }
        }
        
        /// <remarks/>
        public string TextTitle {
            get {
                return this.textTitleField;
            }
            set {
                this.textTitleField = value;
            }
        }
        
        /// <remarks/>
        public string TextHeader {
            get {
                return this.textHeaderField;
            }
            set {
                this.textHeaderField = value;
            }
        }
        
        /// <remarks/>
        public string TextFooter {
            get {
                return this.textFooterField;
            }
            set {
                this.textFooterField = value;
            }
        }
        
        /// <remarks/>
        public string TextPriceLine {
            get {
                return this.textPriceLineField;
            }
            set {
                this.textPriceLineField = value;
            }
        }
        
        /// <remarks/>
        public string TextVolumeBar {
            get {
                return this.textVolumeBarField;
            }
            set {
                this.textVolumeBarField = value;
            }
        }
        
        /// <remarks/>
        public string TextHighest {
            get {
                return this.textHighestField;
            }
            set {
                this.textHighestField = value;
            }
        }
        
        /// <remarks/>
        public string TextLowest {
            get {
                return this.textLowestField;
            }
            set {
                this.textLowestField = value;
            }
        }
        
        /// <remarks/>
        public string TextOpen {
            get {
                return this.textOpenField;
            }
            set {
                this.textOpenField = value;
            }
        }
        
        /// <remarks/>
        public string TextClose {
            get {
                return this.textCloseField;
            }
            set {
                this.textCloseField = value;
            }
        }
        
        /// <remarks/>
        public string TextUp {
            get {
                return this.textUpField;
            }
            set {
                this.textUpField = value;
            }
        }
        
        /// <remarks/>
        public string TextDown {
            get {
                return this.textDownField;
            }
            set {
                this.textDownField = value;
            }
        }
        
        /// <remarks/>
        public string ColorBackground {
            get {
                return this.colorBackgroundField;
            }
            set {
                this.colorBackgroundField = value;
            }
        }
        
        /// <remarks/>
        public string ColorBackWall {
            get {
                return this.colorBackWallField;
            }
            set {
                this.colorBackWallField = value;
            }
        }
        
        /// <remarks/>
        public string ColorVolumeBackWall {
            get {
                return this.colorVolumeBackWallField;
            }
            set {
                this.colorVolumeBackWallField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowVolumeBackWall {
            get {
                return this.showVolumeBackWallField;
            }
            set {
                this.showVolumeBackWallField = value;
            }
        }
        
        /// <remarks/>
        public string ColorHighlight {
            get {
                return this.colorHighlightField;
            }
            set {
                this.colorHighlightField = value;
            }
        }
        
        /// <remarks/>
        public string ColorPriceLine {
            get {
                return this.colorPriceLineField;
            }
            set {
                this.colorPriceLineField = value;
            }
        }
        
        /// <remarks/>
        public string ColorVolumeBar {
            get {
                return this.colorVolumeBarField;
            }
            set {
                this.colorVolumeBarField = value;
            }
        }
        
        /// <remarks/>
        public string ColorVolumeBarFill {
            get {
                return this.colorVolumeBarFillField;
            }
            set {
                this.colorVolumeBarFillField = value;
            }
        }
        
        /// <remarks/>
        public string ColorHigh {
            get {
                return this.colorHighField;
            }
            set {
                this.colorHighField = value;
            }
        }
        
        /// <remarks/>
        public string ColorStickUp {
            get {
                return this.colorStickUpField;
            }
            set {
                this.colorStickUpField = value;
            }
        }
        
        /// <remarks/>
        public string ColorStickLow {
            get {
                return this.colorStickLowField;
            }
            set {
                this.colorStickLowField = value;
            }
        }
        
        /// <remarks/>
        public string ColorConstant {
            get {
                return this.colorConstantField;
            }
            set {
                this.colorConstantField = value;
            }
        }
        
        /// <remarks/>
        public string ColorLow {
            get {
                return this.colorLowField;
            }
            set {
                this.colorLowField = value;
            }
        }
        
        /// <remarks/>
        public string ColorPoint {
            get {
                return this.colorPointField;
            }
            set {
                this.colorPointField = value;
            }
        }
        
        /// <remarks/>
        public string ColorTitle {
            get {
                return this.colorTitleField;
            }
            set {
                this.colorTitleField = value;
            }
        }
        
        /// <remarks/>
        public string ColorFooter {
            get {
                return this.colorFooterField;
            }
            set {
                this.colorFooterField = value;
            }
        }
        
        /// <remarks/>
        public string ColorHeader {
            get {
                return this.colorHeaderField;
            }
            set {
                this.colorHeaderField = value;
            }
        }
        
        /// <remarks/>
        public string ColorAxis {
            get {
                return this.colorAxisField;
            }
            set {
                this.colorAxisField = value;
            }
        }
        
        /// <remarks/>
        public string ColorGrid {
            get {
                return this.colorGridField;
            }
            set {
                this.colorGridField = value;
            }
        }
        
        /// <remarks/>
        public string ColorFonts {
            get {
                return this.colorFontsField;
            }
            set {
                this.colorFontsField = value;
            }
        }
        
        /// <remarks/>
        public string ColorStripe {
            get {
                return this.colorStripeField;
            }
            set {
                this.colorStripeField = value;
            }
        }
        
        /// <remarks/>
        public string ColorOpen {
            get {
                return this.colorOpenField;
            }
            set {
                this.colorOpenField = value;
            }
        }
        
        /// <remarks/>
        public string ColorClose {
            get {
                return this.colorCloseField;
            }
            set {
                this.colorCloseField = value;
            }
        }
        
        /// <remarks/>
        public string ColorVerticalGrid {
            get {
                return this.colorVerticalGridField;
            }
            set {
                this.colorVerticalGridField = value;
            }
        }
        
        /// <remarks/>
        public string ColorHorizontalGrid {
            get {
                return this.colorHorizontalGridField;
            }
            set {
                this.colorHorizontalGridField = value;
            }
        }
        
        /// <remarks/>
        public string ColorUp {
            get {
                return this.colorUpField;
            }
            set {
                this.colorUpField = value;
            }
        }
        
        /// <remarks/>
        public string ColorDown {
            get {
                return this.colorDownField;
            }
            set {
                this.colorDownField = value;
            }
        }
        
        /// <remarks/>
        public string ColorHighLowLine {
            get {
                return this.colorHighLowLineField;
            }
            set {
                this.colorHighLowLineField = value;
            }
        }
        
        /// <remarks/>
        public string ColorCollection {
            get {
                return this.colorCollectionField;
            }
            set {
                this.colorCollectionField = value;
            }
        }
        
        /// <remarks/>
        public LinePattern GridHorizontalStyle {
            get {
                return this.gridHorizontalStyleField;
            }
            set {
                this.gridHorizontalStyleField = value;
            }
        }
        
        /// <remarks/>
        public LinePattern GridVerticalStyle {
            get {
                return this.gridVerticalStyleField;
            }
            set {
                this.gridVerticalStyleField = value;
            }
        }
        
        /// <remarks/>
        public int GridHorizontalWidth {
            get {
                return this.gridHorizontalWidthField;
            }
            set {
                this.gridHorizontalWidthField = value;
            }
        }
        
        /// <remarks/>
        public int GridVerticalWidth {
            get {
                return this.gridVerticalWidthField;
            }
            set {
                this.gridVerticalWidthField = value;
            }
        }
        
        /// <remarks/>
        public string ColorFrame {
            get {
                return this.colorFrameField;
            }
            set {
                this.colorFrameField = value;
            }
        }
        
        /// <remarks/>
        public string FrameBorder {
            get {
                return this.frameBorderField;
            }
            set {
                this.frameBorderField = value;
            }
        }
        
        /// <remarks/>
        public string FormatPriceLine {
            get {
                return this.formatPriceLineField;
            }
            set {
                this.formatPriceLineField = value;
            }
        }
        
        /// <remarks/>
        public string FormatVolume {
            get {
                return this.formatVolumeField;
            }
            set {
                this.formatVolumeField = value;
            }
        }
        
        /// <remarks/>
        public string FormatDate {
            get {
                return this.formatDateField;
            }
            set {
                this.formatDateField = value;
            }
        }
        
        /// <remarks/>
        public bool GradeBackground {
            get {
                return this.gradeBackgroundField;
            }
            set {
                this.gradeBackgroundField = value;
            }
        }
        
        /// <remarks/>
        public bool GradeBackwall {
            get {
                return this.gradeBackwallField;
            }
            set {
                this.gradeBackwallField = value;
            }
        }
        
        /// <remarks/>
        public string WaterMark {
            get {
                return this.waterMarkField;
            }
            set {
                this.waterMarkField = value;
            }
        }
        
        /// <remarks/>
        public int WaterMarkTopMargin {
            get {
                return this.waterMarkTopMarginField;
            }
            set {
                this.waterMarkTopMarginField = value;
            }
        }
        
        /// <remarks/>
        public int WaterMarkLeftMargin {
            get {
                return this.waterMarkLeftMarginField;
            }
            set {
                this.waterMarkLeftMarginField = value;
            }
        }
        
        /// <remarks/>
        public int WaterMarkTransparency {
            get {
                return this.waterMarkTransparencyField;
            }
            set {
                this.waterMarkTransparencyField = value;
            }
        }
        
        /// <remarks/>
        public float PointSize {
            get {
                return this.pointSizeField;
            }
            set {
                this.pointSizeField = value;
            }
        }
        
        /// <remarks/>
        public bool StackVariationLabels {
            get {
                return this.stackVariationLabelsField;
            }
            set {
                this.stackVariationLabelsField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowAxisLabelInLegend {
            get {
                return this.showAxisLabelInLegendField;
            }
            set {
                this.showAxisLabelInLegendField = value;
            }
        }
        
        /// <remarks/>
        public int LineWidth {
            get {
                return this.lineWidthField;
            }
            set {
                this.lineWidthField = value;
            }
        }
        
        /// <remarks/>
        public int SplitPercent {
            get {
                return this.splitPercentField;
            }
            set {
                this.splitPercentField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowHigh {
            get {
                return this.showHighField;
            }
            set {
                this.showHighField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowLow {
            get {
                return this.showLowField;
            }
            set {
                this.showLowField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowOpen {
            get {
                return this.showOpenField;
            }
            set {
                this.showOpenField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowClose {
            get {
                return this.showCloseField;
            }
            set {
                this.showCloseField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowVolume {
            get {
                return this.showVolumeField;
            }
            set {
                this.showVolumeField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowUpVariation {
            get {
                return this.showUpVariationField;
            }
            set {
                this.showUpVariationField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowDownVariation {
            get {
                return this.showDownVariationField;
            }
            set {
                this.showDownVariationField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowLegend {
            get {
                return this.showLegendField;
            }
            set {
                this.showLegendField = value;
            }
        }
        
        /// <remarks/>
        public int VariationYear {
            get {
                return this.variationYearField;
            }
            set {
                this.variationYearField = value;
            }
        }
        
        /// <remarks/>
        public int VolumeDivider {
            get {
                return this.volumeDividerField;
            }
            set {
                this.volumeDividerField = value;
            }
        }
        
        /// <remarks/>
        public int VolumeTextOffset {
            get {
                return this.volumeTextOffsetField;
            }
            set {
                this.volumeTextOffsetField = value;
            }
        }
        
        /// <remarks/>
        public int PriceTextOffset {
            get {
                return this.priceTextOffsetField;
            }
            set {
                this.priceTextOffsetField = value;
            }
        }
        
        /// <remarks/>
        public ImageFrameType FrameType {
            get {
                return this.frameTypeField;
            }
            set {
                this.frameTypeField = value;
            }
        }
        
        /// <remarks/>
        public PredefinedProjection Projection {
            get {
                return this.projectionField;
            }
            set {
                this.projectionField = value;
            }
        }
        
        /// <remarks/>
        public int MarginTop {
            get {
                return this.marginTopField;
            }
            set {
                this.marginTopField = value;
            }
        }
        
        /// <remarks/>
        public int MarginBottom {
            get {
                return this.marginBottomField;
            }
            set {
                this.marginBottomField = value;
            }
        }
        
        /// <remarks/>
        public int MarginLeft {
            get {
                return this.marginLeftField;
            }
            set {
                this.marginLeftField = value;
            }
        }
        
        /// <remarks/>
        public int MarginRight {
            get {
                return this.marginRightField;
            }
            set {
                this.marginRightField = value;
            }
        }
        
        /// <remarks/>
        public string FontFamily {
            get {
                return this.fontFamilyField;
            }
            set {
                this.fontFamilyField = value;
            }
        }
        
        /// <remarks/>
        public int FontSizeHeader {
            get {
                return this.fontSizeHeaderField;
            }
            set {
                this.fontSizeHeaderField = value;
            }
        }
        
        /// <remarks/>
        public int FontSizeFooter {
            get {
                return this.fontSizeFooterField;
            }
            set {
                this.fontSizeFooterField = value;
            }
        }
        
        /// <remarks/>
        public double Height {
            get {
                return this.heightField;
            }
            set {
                this.heightField = value;
            }
        }
        
        /// <remarks/>
        public double Width {
            get {
                return this.widthField;
            }
            set {
                this.widthField = value;
            }
        }
        
        /// <remarks/>
        public int ZoomPercent {
            get {
                return this.zoomPercentField;
            }
            set {
                this.zoomPercentField = value;
            }
        }
        
        /// <remarks/>
        public bool LegendBox {
            get {
                return this.legendBoxField;
            }
            set {
                this.legendBoxField = value;
            }
        }
        
        /// <remarks/>
        public string ColorLegendBackground {
            get {
                return this.colorLegendBackgroundField;
            }
            set {
                this.colorLegendBackgroundField = value;
            }
        }
        
        /// <remarks/>
        public string ColorLegendBorder {
            get {
                return this.colorLegendBorderField;
            }
            set {
                this.colorLegendBorderField = value;
            }
        }
        
        /// <remarks/>
        public int LegendVerticalPosition {
            get {
                return this.legendVerticalPositionField;
            }
            set {
                this.legendVerticalPositionField = value;
            }
        }
        
        /// <remarks/>
        public int LegendHorizontalPosition {
            get {
                return this.legendHorizontalPositionField;
            }
            set {
                this.legendHorizontalPositionField = value;
            }
        }
        
        /// <remarks/>
        public bool Reload {
            get {
                return this.reloadField;
            }
            set {
                this.reloadField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowPriceChartLabels {
            get {
                return this.showPriceChartLabelsField;
            }
            set {
                this.showPriceChartLabelsField = value;
            }
        }
        
        /// <remarks/>
        public TickPeriod TickPrecision {
            get {
                return this.tickPrecisionField;
            }
            set {
                this.tickPrecisionField = value;
            }
        }
        
        /// <remarks/>
        public int TickPeriods {
            get {
                return this.tickPeriodsField;
            }
            set {
                this.tickPeriodsField = value;
            }
        }
        
        /// <remarks/>
        public HorzAlign WaterMarkHorizontalAlign {
            get {
                return this.waterMarkHorizontalAlignField;
            }
            set {
                this.waterMarkHorizontalAlignField = value;
            }
        }
        
        /// <remarks/>
        public PredefinedLightModel LightScheme {
            get {
                return this.lightSchemeField;
            }
            set {
                this.lightSchemeField = value;
            }
        }
        
        /// <remarks/>
        public int FontSizeLegend {
            get {
                return this.fontSizeLegendField;
            }
            set {
                this.fontSizeLegendField = value;
            }
        }
        
        /// <remarks/>
        public int FontSizeAxes {
            get {
                return this.fontSizeAxesField;
            }
            set {
                this.fontSizeAxesField = value;
            }
        }
        
        /// <remarks/>
        public int FontSizeTitle {
            get {
                return this.fontSizeTitleField;
            }
            set {
                this.fontSizeTitleField = value;
            }
        }
        
        /// <remarks/>
        public int DaysForHourDisplay {
            get {
                return this.daysForHourDisplayField;
            }
            set {
                this.daysForHourDisplayField = value;
            }
        }
        
        /// <remarks/>
        public int DaysForDayDisplay {
            get {
                return this.daysForDayDisplayField;
            }
            set {
                this.daysForDayDisplayField = value;
            }
        }
        
        /// <remarks/>
        public int DaysForWeekDisplay {
            get {
                return this.daysForWeekDisplayField;
            }
            set {
                this.daysForWeekDisplayField = value;
            }
        }
        
        /// <remarks/>
        public int DaysForBiWeeklyDisplay {
            get {
                return this.daysForBiWeeklyDisplayField;
            }
            set {
                this.daysForBiWeeklyDisplayField = value;
            }
        }
        
        /// <remarks/>
        public int DaysForMonthDisplay {
            get {
                return this.daysForMonthDisplayField;
            }
            set {
                this.daysForMonthDisplayField = value;
            }
        }
        
        /// <remarks/>
        public int DaysForQuarterDisplay {
            get {
                return this.daysForQuarterDisplayField;
            }
            set {
                this.daysForQuarterDisplayField = value;
            }
        }
        
        /// <remarks/>
        public int DaysForSemiAnnualDisplay {
            get {
                return this.daysForSemiAnnualDisplayField;
            }
            set {
                this.daysForSemiAnnualDisplayField = value;
            }
        }
        
        /// <remarks/>
        public int DaysForAnnualDisplay {
            get {
                return this.daysForAnnualDisplayField;
            }
            set {
                this.daysForAnnualDisplayField = value;
            }
        }
        
        /// <remarks/>
        public int DaysForBiAnnualDisplay {
            get {
                return this.daysForBiAnnualDisplayField;
            }
            set {
                this.daysForBiAnnualDisplayField = value;
            }
        }
        
        /// <remarks/>
        public int DaysForPentaAnnualDisplay {
            get {
                return this.daysForPentaAnnualDisplayField;
            }
            set {
                this.daysForPentaAnnualDisplayField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public enum LinePattern {
        
        /// <remarks/>
        Solid,
        
        /// <remarks/>
        Dot,
        
        /// <remarks/>
        Dash,
        
        /// <remarks/>
        DashDot,
        
        /// <remarks/>
        DashDotDot,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public enum ImageFrameType {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        Colonial,
        
        /// <remarks/>
        Common,
        
        /// <remarks/>
        Embed,
        
        /// <remarks/>
        Emboss,
        
        /// <remarks/>
        FrameOpenRight,
        
        /// <remarks/>
        FrameOpenRL,
        
        /// <remarks/>
        OneBarGradient,
        
        /// <remarks/>
        RoundedUp,
        
        /// <remarks/>
        SlimRoundedShadowed,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public enum PredefinedProjection {
        
        /// <remarks/>
        Orthogonal,
        
        /// <remarks/>
        OrthogonalElevated,
        
        /// <remarks/>
        OrthogonalHorizontalLeft,
        
        /// <remarks/>
        OrthogonalHorizontalRight,
        
        /// <remarks/>
        OrthogonalHalf,
        
        /// <remarks/>
        OrthogonalHalfHorizontalLeft,
        
        /// <remarks/>
        OrthogonalHalfHorizontalRight,
        
        /// <remarks/>
        OrthogonalHalfRotated,
        
        /// <remarks/>
        OrthogonalHalfElevated,
        
        /// <remarks/>
        Perspective,
        
        /// <remarks/>
        PerspectiveHorizontalLeft,
        
        /// <remarks/>
        PerspectiveHorizontalRight,
        
        /// <remarks/>
        PerspectiveRotated,
        
        /// <remarks/>
        PerspectiveElevated,
        
        /// <remarks/>
        PerspectiveTilted,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public enum TickPeriod {
        
        /// <remarks/>
        Tick,
        
        /// <remarks/>
        Millisecond,
        
        /// <remarks/>
        Second,
        
        /// <remarks/>
        Minute,
        
        /// <remarks/>
        Hour,
        
        /// <remarks/>
        Day,
        
        /// <remarks/>
        Week,
        
        /// <remarks/>
        Month,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public enum HorzAlign {
        
        /// <remarks/>
        Center,
        
        /// <remarks/>
        Left,
        
        /// <remarks/>
        Right,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public enum PredefinedLightModel {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        SoftTopLeft,
        
        /// <remarks/>
        SoftFrontal,
        
        /// <remarks/>
        SoftTopRight,
        
        /// <remarks/>
        ShinyTopLeft,
        
        /// <remarks/>
        ShinyFrontal,
        
        /// <remarks/>
        ShinyTopRight,
        
        /// <remarks/>
        MetallicLustre,
        
        /// <remarks/>
        NorthernLights,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class HistoricalChart : StockChart {
        
        private HistoricalPeriodTypes periodTypeField;
        
        private string startDateField;
        
        private string endDateField;
        
        private int widthField;
        
        private int heightField;
        
        private string titleField;
        
        private StockChartStyles styleField;
        
        private string urlField;
        
        /// <remarks/>
        public HistoricalPeriodTypes PeriodType {
            get {
                return this.periodTypeField;
            }
            set {
                this.periodTypeField = value;
            }
        }
        
        /// <remarks/>
        public string StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        public string EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        public int Width {
            get {
                return this.widthField;
            }
            set {
                this.widthField = value;
            }
        }
        
        /// <remarks/>
        public int Height {
            get {
                return this.heightField;
            }
            set {
                this.heightField = value;
            }
        }
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public StockChartStyles Style {
            get {
                return this.styleField;
            }
            set {
                this.styleField = value;
            }
        }
        
        /// <remarks/>
        public string Url {
            get {
                return this.urlField;
            }
            set {
                this.urlField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public enum HistoricalPeriodTypes {
        
        /// <remarks/>
        Daily,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public enum StockChartStyles {
        
        /// <remarks/>
        Line,
        
        /// <remarks/>
        Candle,
        
        /// <remarks/>
        Stick,
        
        /// <remarks/>
        Area,
        
        /// <remarks/>
        Percentage,
        
        /// <remarks/>
        LinePercentage,
        
        /// <remarks/>
        CandlePercentage,
        
        /// <remarks/>
        StickPercentage,
        
        /// <remarks/>
        AreaPercentage,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class Change : Common {
        
        private ChangeTypes typeField;
        
        private double rateField;
        
        private double change1Field;
        
        private double percentChangeField;
        
        /// <remarks/>
        public ChangeTypes Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public double Rate {
            get {
                return this.rateField;
            }
            set {
                this.rateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Change")]
        public double Change1 {
            get {
                return this.change1Field;
            }
            set {
                this.change1Field = value;
            }
        }
        
        /// <remarks/>
        public double PercentChange {
            get {
                return this.percentChangeField;
            }
            set {
                this.percentChangeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public enum ChangeTypes {
        
        /// <remarks/>
        OneMonth,
        
        /// <remarks/>
        ThreeMonth,
        
        /// <remarks/>
        SixMonth,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class CrossRateChange : Common {
        
        private string symbolField;
        
        private QuoteTypes typeField;
        
        private Currency fromField;
        
        private Currency toField;
        
        private string dateField;
        
        private string timeField;
        
        private double rateField;
        
        private double bidField;
        
        private double askField;
        
        private Change[] changesField;
        
        /// <remarks/>
        public string Symbol {
            get {
                return this.symbolField;
            }
            set {
                this.symbolField = value;
            }
        }
        
        /// <remarks/>
        public QuoteTypes Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public Currency From {
            get {
                return this.fromField;
            }
            set {
                this.fromField = value;
            }
        }
        
        /// <remarks/>
        public Currency To {
            get {
                return this.toField;
            }
            set {
                this.toField = value;
            }
        }
        
        /// <remarks/>
        public string Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        public string Time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
            }
        }
        
        /// <remarks/>
        public double Rate {
            get {
                return this.rateField;
            }
            set {
                this.rateField = value;
            }
        }
        
        /// <remarks/>
        public double Bid {
            get {
                return this.bidField;
            }
            set {
                this.bidField = value;
            }
        }
        
        /// <remarks/>
        public double Ask {
            get {
                return this.askField;
            }
            set {
                this.askField = value;
            }
        }
        
        /// <remarks/>
        public Change[] Changes {
            get {
                return this.changesField;
            }
            set {
                this.changesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public enum QuoteTypes {
        
        /// <remarks/>
        RealTime,
        
        /// <remarks/>
        Delayed15Minutes,
        
        /// <remarks/>
        Delayed20Minutes,
        
        /// <remarks/>
        NotAvailable,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class AverageHistoricalCrossRate : Common {
        
        private string symbolField;
        
        private QuoteTypes typeField;
        
        private Currency fromField;
        
        private Currency toField;
        
        private string dateField;
        
        private double firstField;
        
        private double lastField;
        
        private double highField;
        
        private double lowField;
        
        private string textField;
        
        private double bidField;
        
        private double askField;
        
        private double averageField;
        
        /// <remarks/>
        public string Symbol {
            get {
                return this.symbolField;
            }
            set {
                this.symbolField = value;
            }
        }
        
        /// <remarks/>
        public QuoteTypes Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public Currency From {
            get {
                return this.fromField;
            }
            set {
                this.fromField = value;
            }
        }
        
        /// <remarks/>
        public Currency To {
            get {
                return this.toField;
            }
            set {
                this.toField = value;
            }
        }
        
        /// <remarks/>
        public string Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        public double First {
            get {
                return this.firstField;
            }
            set {
                this.firstField = value;
            }
        }
        
        /// <remarks/>
        public double Last {
            get {
                return this.lastField;
            }
            set {
                this.lastField = value;
            }
        }
        
        /// <remarks/>
        public double High {
            get {
                return this.highField;
            }
            set {
                this.highField = value;
            }
        }
        
        /// <remarks/>
        public double Low {
            get {
                return this.lowField;
            }
            set {
                this.lowField = value;
            }
        }
        
        /// <remarks/>
        public string Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        /// <remarks/>
        public double Bid {
            get {
                return this.bidField;
            }
            set {
                this.bidField = value;
            }
        }
        
        /// <remarks/>
        public double Ask {
            get {
                return this.askField;
            }
            set {
                this.askField = value;
            }
        }
        
        /// <remarks/>
        public double Average {
            get {
                return this.averageField;
            }
            set {
                this.averageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class MultipleHistoricalCrossRates : Common {
        
        private FullHistoricalCrossRate[] historicalCrossRatesField;
        
        /// <remarks/>
        public FullHistoricalCrossRate[] HistoricalCrossRates {
            get {
                return this.historicalCrossRatesField;
            }
            set {
                this.historicalCrossRatesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class FullHistoricalCrossRate : Common {
        
        private string symbolField;
        
        private QuoteTypes typeField;
        
        private Currency fromField;
        
        private Currency toField;
        
        private string dateField;
        
        private double firstField;
        
        private double lastField;
        
        private double highField;
        
        private double lowField;
        
        private string textField;
        
        private double bidField;
        
        private double askField;
        
        /// <remarks/>
        public string Symbol {
            get {
                return this.symbolField;
            }
            set {
                this.symbolField = value;
            }
        }
        
        /// <remarks/>
        public QuoteTypes Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public Currency From {
            get {
                return this.fromField;
            }
            set {
                this.fromField = value;
            }
        }
        
        /// <remarks/>
        public Currency To {
            get {
                return this.toField;
            }
            set {
                this.toField = value;
            }
        }
        
        /// <remarks/>
        public string Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        public double First {
            get {
                return this.firstField;
            }
            set {
                this.firstField = value;
            }
        }
        
        /// <remarks/>
        public double Last {
            get {
                return this.lastField;
            }
            set {
                this.lastField = value;
            }
        }
        
        /// <remarks/>
        public double High {
            get {
                return this.highField;
            }
            set {
                this.highField = value;
            }
        }
        
        /// <remarks/>
        public double Low {
            get {
                return this.lowField;
            }
            set {
                this.lowField = value;
            }
        }
        
        /// <remarks/>
        public string Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        /// <remarks/>
        public double Bid {
            get {
                return this.bidField;
            }
            set {
                this.bidField = value;
            }
        }
        
        /// <remarks/>
        public double Ask {
            get {
                return this.askField;
            }
            set {
                this.askField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class FullHistoricalCrossRates : Common {
        
        private string symbolField;
        
        private Currency fromField;
        
        private Currency toField;
        
        private string startDateField;
        
        private string endDateField;
        
        private FullCrossRateItem[] crossRatesField;
        
        /// <remarks/>
        public string Symbol {
            get {
                return this.symbolField;
            }
            set {
                this.symbolField = value;
            }
        }
        
        /// <remarks/>
        public Currency From {
            get {
                return this.fromField;
            }
            set {
                this.fromField = value;
            }
        }
        
        /// <remarks/>
        public Currency To {
            get {
                return this.toField;
            }
            set {
                this.toField = value;
            }
        }
        
        /// <remarks/>
        public string StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        public string EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        public FullCrossRateItem[] CrossRates {
            get {
                return this.crossRatesField;
            }
            set {
                this.crossRatesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class HistoricalCrossRates : Common {
        
        private string symbolField;
        
        private Currency fromField;
        
        private Currency toField;
        
        private string startDateField;
        
        private string endDateField;
        
        private CrossRateItem[] crossRatesField;
        
        /// <remarks/>
        public string Symbol {
            get {
                return this.symbolField;
            }
            set {
                this.symbolField = value;
            }
        }
        
        /// <remarks/>
        public Currency From {
            get {
                return this.fromField;
            }
            set {
                this.fromField = value;
            }
        }
        
        /// <remarks/>
        public Currency To {
            get {
                return this.toField;
            }
            set {
                this.toField = value;
            }
        }
        
        /// <remarks/>
        public string StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        public string EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        public CrossRateItem[] CrossRates {
            get {
                return this.crossRatesField;
            }
            set {
                this.crossRatesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class HistoricalCrossRate : Common {
        
        private string symbolField;
        
        private QuoteTypes typeField;
        
        private Currency fromField;
        
        private Currency toField;
        
        private string dateField;
        
        private double firstField;
        
        private double lastField;
        
        private double highField;
        
        private double lowField;
        
        private string textField;
        
        /// <remarks/>
        public string Symbol {
            get {
                return this.symbolField;
            }
            set {
                this.symbolField = value;
            }
        }
        
        /// <remarks/>
        public QuoteTypes Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public Currency From {
            get {
                return this.fromField;
            }
            set {
                this.fromField = value;
            }
        }
        
        /// <remarks/>
        public Currency To {
            get {
                return this.toField;
            }
            set {
                this.toField = value;
            }
        }
        
        /// <remarks/>
        public string Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        public double First {
            get {
                return this.firstField;
            }
            set {
                this.firstField = value;
            }
        }
        
        /// <remarks/>
        public double Last {
            get {
                return this.lastField;
            }
            set {
                this.lastField = value;
            }
        }
        
        /// <remarks/>
        public double High {
            get {
                return this.highField;
            }
            set {
                this.highField = value;
            }
        }
        
        /// <remarks/>
        public double Low {
            get {
                return this.lowField;
            }
            set {
                this.lowField = value;
            }
        }
        
        /// <remarks/>
        public string Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class HTMLCrossRateTable : Common {
        
        private string hTMLField;
        
        /// <remarks/>
        public string HTML {
            get {
                return this.hTMLField;
            }
            set {
                this.hTMLField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class Report : Common {
        
        private string toField;
        
        private Line[] linesField;
        
        /// <remarks/>
        public string To {
            get {
                return this.toField;
            }
            set {
                this.toField = value;
            }
        }
        
        /// <remarks/>
        public Line[] Lines {
            get {
                return this.linesField;
            }
            set {
                this.linesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class CrossRateTableLineWithBidAsk : Common {
        
        private Currency fromField;
        
        private CrossRate[] exchangeRatesField;
        
        /// <remarks/>
        public Currency From {
            get {
                return this.fromField;
            }
            set {
                this.fromField = value;
            }
        }
        
        /// <remarks/>
        public CrossRate[] ExchangeRates {
            get {
                return this.exchangeRatesField;
            }
            set {
                this.exchangeRatesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class CrossRate : Common {
        
        private string symbolField;
        
        private QuoteTypes typeField;
        
        private Currency fromField;
        
        private Currency toField;
        
        private string dateField;
        
        private string timeField;
        
        private double rateField;
        
        private double bidField;
        
        private string bidTimeField;
        
        private double askField;
        
        private string askTimeField;
        
        private string textField;
        
        /// <remarks/>
        public string Symbol {
            get {
                return this.symbolField;
            }
            set {
                this.symbolField = value;
            }
        }
        
        /// <remarks/>
        public QuoteTypes Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public Currency From {
            get {
                return this.fromField;
            }
            set {
                this.fromField = value;
            }
        }
        
        /// <remarks/>
        public Currency To {
            get {
                return this.toField;
            }
            set {
                this.toField = value;
            }
        }
        
        /// <remarks/>
        public string Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        public string Time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
            }
        }
        
        /// <remarks/>
        public double Rate {
            get {
                return this.rateField;
            }
            set {
                this.rateField = value;
            }
        }
        
        /// <remarks/>
        public double Bid {
            get {
                return this.bidField;
            }
            set {
                this.bidField = value;
            }
        }
        
        /// <remarks/>
        public string BidTime {
            get {
                return this.bidTimeField;
            }
            set {
                this.bidTimeField = value;
            }
        }
        
        /// <remarks/>
        public double Ask {
            get {
                return this.askField;
            }
            set {
                this.askField = value;
            }
        }
        
        /// <remarks/>
        public string AskTime {
            get {
                return this.askTimeField;
            }
            set {
                this.askTimeField = value;
            }
        }
        
        /// <remarks/>
        public string Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class CrossRateTableWithBidAsk : Common {
        
        private CrossRateTableLineWithBidAsk[] linesField;
        
        /// <remarks/>
        public CrossRateTableLineWithBidAsk[] Lines {
            get {
                return this.linesField;
            }
            set {
                this.linesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class ExchangeRate : Common {
        
        private Currency toField;
        
        private string dateField;
        
        private string timeField;
        
        private double rateField;
        
        private string textField;
        
        /// <remarks/>
        public Currency To {
            get {
                return this.toField;
            }
            set {
                this.toField = value;
            }
        }
        
        /// <remarks/>
        public string Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        public string Time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
            }
        }
        
        /// <remarks/>
        public double Rate {
            get {
                return this.rateField;
            }
            set {
                this.rateField = value;
            }
        }
        
        /// <remarks/>
        public string Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class CrossRateTableLine : Common {
        
        private Currency fromField;
        
        private ExchangeRate[] exchangeRatesField;
        
        /// <remarks/>
        public Currency From {
            get {
                return this.fromField;
            }
            set {
                this.fromField = value;
            }
        }
        
        /// <remarks/>
        public ExchangeRate[] ExchangeRates {
            get {
                return this.exchangeRatesField;
            }
            set {
                this.exchangeRatesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class CrossRateTable : Common {
        
        private CrossRateTableLine[] linesField;
        
        /// <remarks/>
        public CrossRateTableLine[] Lines {
            get {
                return this.linesField;
            }
            set {
                this.linesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class ForwardRate : Common {
        
        private string symbolField;
        
        private Currency fromField;
        
        private Currency toField;
        
        private string dateField;
        
        private string timeField;
        
        private double bidField;
        
        private string bidTimeField;
        
        private double askField;
        
        private string askTimeField;
        
        private int factorField;
        
        private Forward[] forwardsField;
        
        /// <remarks/>
        public string Symbol {
            get {
                return this.symbolField;
            }
            set {
                this.symbolField = value;
            }
        }
        
        /// <remarks/>
        public Currency From {
            get {
                return this.fromField;
            }
            set {
                this.fromField = value;
            }
        }
        
        /// <remarks/>
        public Currency To {
            get {
                return this.toField;
            }
            set {
                this.toField = value;
            }
        }
        
        /// <remarks/>
        public string Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        public string Time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
            }
        }
        
        /// <remarks/>
        public double Bid {
            get {
                return this.bidField;
            }
            set {
                this.bidField = value;
            }
        }
        
        /// <remarks/>
        public string BidTime {
            get {
                return this.bidTimeField;
            }
            set {
                this.bidTimeField = value;
            }
        }
        
        /// <remarks/>
        public double Ask {
            get {
                return this.askField;
            }
            set {
                this.askField = value;
            }
        }
        
        /// <remarks/>
        public string AskTime {
            get {
                return this.askTimeField;
            }
            set {
                this.askTimeField = value;
            }
        }
        
        /// <remarks/>
        public int Factor {
            get {
                return this.factorField;
            }
            set {
                this.factorField = value;
            }
        }
        
        /// <remarks/>
        public Forward[] Forwards {
            get {
                return this.forwardsField;
            }
            set {
                this.forwardsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class ExchangeConversion : Common {
        
        private Currency fromField;
        
        private Currency toField;
        
        private string dateField;
        
        private string timeField;
        
        private double amountField;
        
        private double exchangeRateField;
        
        private double resultField;
        
        /// <remarks/>
        public Currency From {
            get {
                return this.fromField;
            }
            set {
                this.fromField = value;
            }
        }
        
        /// <remarks/>
        public Currency To {
            get {
                return this.toField;
            }
            set {
                this.toField = value;
            }
        }
        
        /// <remarks/>
        public string Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        public string Time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
            }
        }
        
        /// <remarks/>
        public double Amount {
            get {
                return this.amountField;
            }
            set {
                this.amountField = value;
            }
        }
        
        /// <remarks/>
        public double ExchangeRate {
            get {
                return this.exchangeRateField;
            }
            set {
                this.exchangeRateField = value;
            }
        }
        
        /// <remarks/>
        public double Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public partial class CurrencyList : Common {
        
        private CurrencyItem[] currenciesField;
        
        /// <remarks/>
        public CurrencyItem[] Currencies {
            get {
                return this.currenciesField;
            }
            set {
                this.currenciesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public enum PeriodTypes {
        
        /// <remarks/>
        Day,
        
        /// <remarks/>
        Week,
        
        /// <remarks/>
        Month,
        
        /// <remarks/>
        Quarter,
        
        /// <remarks/>
        Year,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xignite.com/services/")]
    public enum CountryTypes {
        
        /// <remarks/>
        Mexico,
        
        /// <remarks/>
        UnitedStatesAM,
        
        /// <remarks/>
        UnitedStatesPM,
        
        /// <remarks/>
        Canada,
        
        /// <remarks/>
        Europe,
        
        /// <remarks/>
        Russia,
        
        /// <remarks/>
        Poland,
        
        /// <remarks/>
        Romania,
        
        /// <remarks/>
        Hungary,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void ListCurrenciesCompletedEventHandler(object sender, ListCurrenciesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListCurrenciesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListCurrenciesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CurrencyList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CurrencyList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void ConvertRealTimeValueCompletedEventHandler(object sender, ConvertRealTimeValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConvertRealTimeValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConvertRealTimeValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExchangeConversion Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExchangeConversion)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void ConvertHistoricalValueCompletedEventHandler(object sender, ConvertHistoricalValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConvertHistoricalValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConvertHistoricalValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExchangeConversion Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExchangeConversion)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetRealTimeForwardRateCompletedEventHandler(object sender, GetRealTimeForwardRateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRealTimeForwardRateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRealTimeForwardRateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ForwardRate Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ForwardRate)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetRealTimeCrossRateAsStringCompletedEventHandler(object sender, GetRealTimeCrossRateAsStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRealTimeCrossRateAsStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRealTimeCrossRateAsStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CrossRate Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CrossRate)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetLatestCrossRateCompletedEventHandler(object sender, GetLatestCrossRateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLatestCrossRateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLatestCrossRateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CrossRate Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CrossRate)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetLatestCrossRatesCompletedEventHandler(object sender, GetLatestCrossRatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLatestCrossRatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLatestCrossRatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CrossRate[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CrossRate[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetRealTimeCrossRateCompletedEventHandler(object sender, GetRealTimeCrossRateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRealTimeCrossRateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRealTimeCrossRateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CrossRate Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CrossRate)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetRealTimeCrossRateGMTCompletedEventHandler(object sender, GetRealTimeCrossRateGMTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRealTimeCrossRateGMTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRealTimeCrossRateGMTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CrossRate Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CrossRate)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetRawCrossRateCompletedEventHandler(object sender, GetRawCrossRateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRawCrossRateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRawCrossRateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CrossRate Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CrossRate)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetRawCrossRatesCompletedEventHandler(object sender, GetRawCrossRatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRawCrossRatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRawCrossRatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CrossRate[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CrossRate[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetRealTimeCrossRatesCompletedEventHandler(object sender, GetRealTimeCrossRatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRealTimeCrossRatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRealTimeCrossRatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CrossRate[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CrossRate[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetHistoricalCrossRateTablesCompletedEventHandler(object sender, GetHistoricalCrossRateTablesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHistoricalCrossRateTablesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHistoricalCrossRateTablesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CrossRateTable[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CrossRateTable[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetHistoricalCrossRateTablesBidAskCompletedEventHandler(object sender, GetHistoricalCrossRateTablesBidAskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHistoricalCrossRateTablesBidAskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHistoricalCrossRateTablesBidAskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CrossRateTableWithBidAsk[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CrossRateTableWithBidAsk[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetCurrencyReportCompletedEventHandler(object sender, GetCurrencyReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrencyReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrencyReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Report Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Report)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetHistoricalCrossRateTableCompletedEventHandler(object sender, GetHistoricalCrossRateTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHistoricalCrossRateTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHistoricalCrossRateTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CrossRateTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CrossRateTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetHistoricalCrossRateTableBidAskCompletedEventHandler(object sender, GetHistoricalCrossRateTableBidAskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHistoricalCrossRateTableBidAskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHistoricalCrossRateTableBidAskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CrossRateTableWithBidAsk Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CrossRateTableWithBidAsk)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetRealTimeCrossRateTableCompletedEventHandler(object sender, GetRealTimeCrossRateTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRealTimeCrossRateTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRealTimeCrossRateTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CrossRateTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CrossRateTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetRealTimeCrossRateTableWithBidAskCompletedEventHandler(object sender, GetRealTimeCrossRateTableWithBidAskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRealTimeCrossRateTableWithBidAskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRealTimeCrossRateTableWithBidAskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CrossRateTableWithBidAsk Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CrossRateTableWithBidAsk)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetAllCrossRatesForACurrencyCompletedEventHandler(object sender, GetAllCrossRatesForACurrencyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllCrossRatesForACurrencyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllCrossRatesForACurrencyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CrossRateTableLineWithBidAsk Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CrossRateTableLineWithBidAsk)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetRealTimeCrossRateTableAsHTMLCompletedEventHandler(object sender, GetRealTimeCrossRateTableAsHTMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRealTimeCrossRateTableAsHTMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRealTimeCrossRateTableAsHTMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HTMLCrossRateTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HTMLCrossRateTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetSimpleRealTimeCrossRateTableAsHTMLCompletedEventHandler(object sender, GetSimpleRealTimeCrossRateTableAsHTMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSimpleRealTimeCrossRateTableAsHTMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSimpleRealTimeCrossRateTableAsHTMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HTMLCrossRateTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HTMLCrossRateTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetHistoricalCrossRateTableAsHTMLCompletedEventHandler(object sender, GetHistoricalCrossRateTableAsHTMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHistoricalCrossRateTableAsHTMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHistoricalCrossRateTableAsHTMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HTMLCrossRateTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HTMLCrossRateTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetHistoricalCrossRateCompletedEventHandler(object sender, GetHistoricalCrossRateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHistoricalCrossRateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHistoricalCrossRateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HistoricalCrossRate Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HistoricalCrossRate)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetHistoricalCrossRatesCompletedEventHandler(object sender, GetHistoricalCrossRatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHistoricalCrossRatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHistoricalCrossRatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HistoricalCrossRate[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HistoricalCrossRate[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetHistoricalCrossRateBidAskCompletedEventHandler(object sender, GetHistoricalCrossRateBidAskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHistoricalCrossRateBidAskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHistoricalCrossRateBidAskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FullHistoricalCrossRate Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FullHistoricalCrossRate)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetHistoricalCrossRatesBidAskCompletedEventHandler(object sender, GetHistoricalCrossRatesBidAskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHistoricalCrossRatesBidAskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHistoricalCrossRatesBidAskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FullHistoricalCrossRate[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FullHistoricalCrossRate[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetHistoricalCrossRatesRangeCompletedEventHandler(object sender, GetHistoricalCrossRatesRangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHistoricalCrossRatesRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHistoricalCrossRatesRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HistoricalCrossRates Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HistoricalCrossRates)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetHistoricalCrossRatesBidAskRangeCompletedEventHandler(object sender, GetHistoricalCrossRatesBidAskRangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHistoricalCrossRatesBidAskRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHistoricalCrossRatesBidAskRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FullHistoricalCrossRates Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FullHistoricalCrossRates)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetHistoricalCrossRatesAsOfCompletedEventHandler(object sender, GetHistoricalCrossRatesAsOfCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHistoricalCrossRatesAsOfCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHistoricalCrossRatesAsOfCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HistoricalCrossRates Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HistoricalCrossRates)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetHistoricalCrossRatesBidAskAsOfCompletedEventHandler(object sender, GetHistoricalCrossRatesBidAskAsOfCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHistoricalCrossRatesBidAskAsOfCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHistoricalCrossRatesBidAskAsOfCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FullHistoricalCrossRates Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FullHistoricalCrossRates)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetOfficialCrossRateCompletedEventHandler(object sender, GetOfficialCrossRateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOfficialCrossRateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOfficialCrossRateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HistoricalCrossRate Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HistoricalCrossRate)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetOfficialCrossRatesCompletedEventHandler(object sender, GetOfficialCrossRatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOfficialCrossRatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOfficialCrossRatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HistoricalCrossRate[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HistoricalCrossRate[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetMutipleHistoricalCrossRatesCompletedEventHandler(object sender, GetMutipleHistoricalCrossRatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMutipleHistoricalCrossRatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMutipleHistoricalCrossRatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MultipleHistoricalCrossRates Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MultipleHistoricalCrossRates)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetAverageHistoricalCrossRatesCompletedEventHandler(object sender, GetAverageHistoricalCrossRatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAverageHistoricalCrossRatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAverageHistoricalCrossRatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AverageHistoricalCrossRate[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AverageHistoricalCrossRate[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetAverageHistoricalCrossRateCompletedEventHandler(object sender, GetAverageHistoricalCrossRateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAverageHistoricalCrossRateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAverageHistoricalCrossRateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AverageHistoricalCrossRate Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AverageHistoricalCrossRate)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetHistoricalMonthlyCrossRatesRangeCompletedEventHandler(object sender, GetHistoricalMonthlyCrossRatesRangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHistoricalMonthlyCrossRatesRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHistoricalMonthlyCrossRatesRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FullHistoricalCrossRates Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FullHistoricalCrossRates)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetCrossRateChangeCompletedEventHandler(object sender, GetCrossRateChangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCrossRateChangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCrossRateChangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CrossRateChange Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CrossRateChange)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetCurrencyChartCustomCompletedEventHandler(object sender, GetCurrencyChartCustomCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrencyChartCustomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrencyChartCustomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HistoricalChart Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HistoricalChart)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetCurrencyChartCustomBinaryCompletedEventHandler(object sender, GetCurrencyChartCustomBinaryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrencyChartCustomBinaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrencyChartCustomBinaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ChartBinary Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ChartBinary)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetCurrencyChartCompletedEventHandler(object sender, GetCurrencyChartCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrencyChartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrencyChartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HistoricalChart Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HistoricalChart)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetCurrencyChartBinaryCompletedEventHandler(object sender, GetCurrencyChartBinaryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrencyChartBinaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrencyChartBinaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ChartBinary Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ChartBinary)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetChartDesignCompletedEventHandler(object sender, GetChartDesignCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChartDesignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetChartDesignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ChartDesign Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ChartDesign)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetTickCompletedEventHandler(object sender, GetTickCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTickCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTickCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SingleTick Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SingleTick)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetTicksCompletedEventHandler(object sender, GetTicksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTicksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTicksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Ticks Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Ticks)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetHistoricalHighLowCompletedEventHandler(object sender, GetHistoricalHighLowCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHistoricalHighLowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHistoricalHighLowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HighLowTick Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HighLowTick)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetIntradayHighLowCompletedEventHandler(object sender, GetIntradayHighLowCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIntradayHighLowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIntradayHighLowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HighLowTick Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HighLowTick)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591